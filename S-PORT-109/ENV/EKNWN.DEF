 Module EKNWN("iAPX286");
%+D begin insert ECOMN,EBASE,EDUMP,ECENT;
%-D begin insert ECOMN,EBASE,      ECENT;

       -----------------------------------------------------------------
       ---  COPYRIGHT 1989 by                                        ---
       ---  Simula a.s.                                              ---
       ---                                                           ---
       ---              P O R T A B L E     S I M U L A              ---
       ---                                                           ---
       ---                 F O R    i A P X    2 8 6                 ---
       ---                                                           ---
       ---                                                           ---
       ---        T  H  E     E  N  V  I  R  O  N  M  E  N  T        ---
       ---                                                           ---
       ---                                                           ---
       ---     S y s t e m   a n d   K n o w n   R o u t i n e s     ---
       ---                                                           ---
       ---              S u b s t i t u t e    P a r t               ---
       ---                                                           ---
       ---                                                           ---
       ---  Selection Switches:                                      ---
       ---                                                           ---
       ---     D - Includes tracing dumps                            ---
       ---     M - Includes MS-DOS                                   ---
       ---     O - Includes MS-OS2                                   ---
       ---     X - Includes XENIX                                    ---
       ---     E - Extended mode -- 32 Bit 386                       ---
       -----------------------------------------------------------------

Define MAX_DIM=10;
Define MAX_SORT=21;
Define MAX_TXT=32000;
Define MAX_FIL=7;
Define MAX_KEY=255;
Define MAX_ENO=130;

Define ENO_ITN_1=18;   -- Internal error in Simula Run-Time System.
Define ENO_QUA_1=23;   -- Qualification check fails.
Define ENO_NON_1=24;   -- Attempt to remotely access attribute through none
Define ENO_SWT_1=129;  -- Switch designator:  Index value is out of range.
%page

Visible record entity;  info "DYNAMIC";
begin ref(entity) sl;
      range(0:255)  sort,misc;
      variant ref(ptp)      pp;
      variant range(0:MAX_TXT) ncha;
      variant size lng;
end;

Visible record instance:entity;
begin ref(entity) gcl;
---   variant ref(instance) dl;
              ref(instance) dl;
              label         lsc;
---   variant entry(Pmovit) movelt;
end;

 Visible record filent:instance;
 begin ref(filent)        prd;
       ref(filent)        suc;
       infix(txtqnt)      nam;
       infix(txtqnt)      img;
       integer            loc;
   --  integer            lastloc;    removed jan 87 pje
   --  integer            maxloc;     removed jan 87 pje
       integer            bsize;
       range(0:MAX_FIL)   type;
       range(0:MAX_KEY)   key;
       boolean            eof;
       boolean            locked;
       range(0:MAX_KEY)   trc;  -- 0:no trace, >0:index to trace table
       infix(txtqnt)      action;
 end;

 Visible record arhead:entity;
 begin range(0:MAX_DIM)    ndim;
       integer              nelt;
       infix(arrbnd)       bound(0);
 end;

 Visible record arrbnd;  info  "TYPE";
 begin integer lb,ub;
       variant integer dope;
       variant integer neg_base;
 end;

 Visible record arent2:entity;
 begin integer lb_1,ub_1,dope;
       integer lb_2,ub_2,neg_base;
 end;

 Visible record arent1:entity;
 begin integer lb,ub end;

 Visible record txtqnt;  info "TYPE";
 begin ref(txtent) ent;
       range(0:MAX_TXT) cp,sp,lp;
 end;

 Visible record txtent:entity;
 begin character cha(0) end;

 const infix(txtqnt) notext=record:txtqnt(sp=0,lp=0,cp=0,ent=none);

%page

 Sysroutine("RTERR") DOS_RTERR;
 import range(0:MAX_ENO) eno; ref() filref;  end;


 Visible known("ERRNON") ERR_NONE;
 begin DOS_RTERR(ENO_NON_1,none) end;

 Visible known("ERRQUA") ERR_QUA;
 begin DOS_RTERR(ENO_QUA_1,none) end;

 Visible known("ERRSWT") ERR_SWT;
 begin DOS_RTERR(ENO_SWT_1,none) end;

 Visible known("ERROR") ERROR; import range(0:MAX_ENO) eno;
 begin DOS_RTERR(eno,none) end;

 Visible known("CBLNK") C_BLNK; import infix(string) str;
 begin APX_SFILL(' ',str.nchr,str.chradr) end;

 Visible known("CMOVE") C_MOVE; import infix(string) src,dst;
 begin range(0:Maxword) n,nd,r;
%-E    infix(Any2Byte) d;
%+E    infix(Any4Byte) d;
       n:=src.nchr; nd:=dst.nchr;
       if n > nd then n:=nd; r:=0 else r:=nd-n endif;
       if n > 0
       then if name2ref(dst.chradr) < name2ref(src.chradr)
            then APX_SMOVEI(n,dst.chradr,src.chradr);
            else
%-E              d.AsWrd:=n-1;
%+E              d.AsInt:=n-1;
                 APX_SMOVED(n,dst.chradr+d.AsAaddr,src.chradr+d.AsAaddr)
%-V              CLD108;
            endif;
       endif;
       if r > 0 then APX_SFILL(' ',r,name(var(dst.chradr)(n))) endif;
 end;

 Visible Routine MODULO;
 import integer x,y; export integer val;
 begin val:= x - ((x/y) * y);
       if    val > 0 then if y < 0 then val:=val+y endif
       elsif val < 0 then if y > 0 then val:=val+y endif  endif;
 end;

 Visible known("RENTI") RENTIER;
 import real arg; export integer   val;
 begin val:=arg qua integer;
       if arg < (val qua real) then val := val - 1 endif;
 end;

 Visible known("DENTI") DENTIER;
 import long real arg; export integer val;
 begin val:=arg qua integer;
       if arg < (val qua long real) then val := val - 1 endif;
 end;

 Visible known("DIGIT") DIGIT;
 import character arg; export boolean val;
 begin val:=(arg >= '0') and (arg <= '9') end;

 Visible known("LETTER") LETTER;
 import character arg; export boolean val;
 begin val:=((arg >= 'A') and (arg <= 'Z'))
         or ((arg >= 'a') and (arg <= 'z'));
 end;
%title ***  T e x t    H a d l i n g  ***

 Visible known("TRFREL") TRFREL; --- Text reference relation ---
 import infix(txtqnt) left;
        infix(txtqnt) right;
        boolean code;              -- true: =/=   false: ==
 export boolean relation;
 begin if left.sp <> right.sp then relation:=code;
    elsif left.lp <> right.lp then relation:=code;
    elsif left.ent <> right.ent then relation:=code;
    else relation:=not code endif;
 end;

 Visible known("TXTREL") TXTREL;
 import infix(txtqnt) left,right; integer code;
 export boolean relation;
 begin range(0:MaxWord) i;            --  Loop index.
       range(0:MaxWord) rgh;          --  Right length/content
       range(0:MaxWord) lft;          --  Left  length/content
       range(0:MaxWord) lng;          --  Length of common parts.
       rgh:=right.lp-right.sp; lft:=left.lp-left.sp;
       case 1:6 (code)
       when 2: --- EQUAL
               if rgh <> lft then relation:=false
               elsif rgh = 0 then relation:=true
               else relation:=APX_SCMPEQ(rgh,
                                  name(right.ent.cha(right.sp)),
                                  name(left.ent.cha(left.sp)) );
               endif;
       when 5: --- NOT EQUAL
               if rgh <> lft then relation:=true
               elsif rgh = 0 then relation:=false
               else relation:=not APX_SCMPEQ(rgh,
                                      name(right.ent.cha(right.sp)),
                                      name(left.ent.cha(left.sp)) );
               endif;
       otherwise
            i:=0; lng:=if rgh > lft then lft else rgh;
            repeat while i < lng
            do if right.ent.cha(right.sp+i) <> left.ent.cha(left.sp+i)
               then rgh:=right.ent.cha(right.sp+i) qua integer;
                    lft:=left.ent.cha(left.sp+i) qua integer; goto EXXX;
               endif; i:=i+1;
            endrepeat;
      EXXX: case 1:6 (code)
            when 1: relation:=lft <  rgh
            when 3: relation:=lft <= rgh
            when 4: relation:=lft >  rgh
            when 6: relation:=lft >= rgh
            otherwise ERROR(ENO_ITN_1) endcase;
       endcase;
 end;


 Visible known("TXTREP") TXTREP; -- string relation ********* NEW in 106
 import infix(string) str1,str2; range(1:6) code; export boolean rel;
 begin range(0:MaxWord) i;            --  Loop index.
       range(0:MaxWord) rgh;          --  Right length/content
       range(0:MaxWord) lft;          --  Left  length/content
       range(0:MaxWord) lng;          --  Length of common parts.
       case 1:6 (code)
       when 2: --- EQUAL
               if str1.nchr <> str2.nchr then rel:=false else
               rel:=APX_SCMPEQ(str1.nchr,str1.chradr,str2.chradr) endif;
       when 5: --- NOT EQUAL
               if str1.nchr <> str2.nchr then rel:=true else
               rel:=not APX_SCMPEQ(str1.nchr,str1.chradr,str2.chradr) endif;
       otherwise
            i:=0; lng:=if str1.nchr > str2.nchr then str2.nchr else str1.nchr;
            repeat while i < lng
            do rgh:=var(str1.chradr)(i) qua integer;
               lft:=var(str2.chradr)(i) qua integer;
               if rgh <> lft then goto EXXX endif;    i:=i+1;
            endrepeat;
            rgh:=str1.nchr; lft:=str2.nchr;
      EXXX: case 1:6 (code)
            when 1: rel:=lft <  rgh
            when 3: rel:=lft <= rgh
            when 4: rel:=lft >  rgh
            when 6: rel:=lft >= rgh
            otherwise status:=27 endcase;
       endcase;
 end;


 Visible known("STRIP") STRIP;
 import infix(txtqnt) txt; export infix(txtqnt) res;
 begin range(0:MAX_TXT) n; n:=txt.lp-txt.sp;
       if n>0 then n:=APX_STRIP(' ',n,name(txt.ent.cha(txt.lp-1))) endif
       if n=0 then res:=notext
%+V    else res:=txt; res.lp:=res.sp+n; res.cp:=res.sp endif;
%-V    else res:=txt; res.lp:=res.sp+n; res.cp:=res.sp; CLD108 endif;
 end;

 Visible known("STRIPP") STRIPP;          -- **************** NEW in 106
 import infix(string) str; export range(0:MAX_TXT) n;
 begin n:=str.nchr;
       if n>0 then n:=APX_STRIP(' ',n,name(var(str.chradr)(n-1))) endif;
%-V    CLD108;
 end;
%page

 Visible known("EXTGC") EXTGC;            -- ***************  NEW in 106
 import size request; export boolean extend;
 begin --- decide whether to extend storage or do a garbage collection
%+M    extend:=true
%+O    extend:=narea < MINALLOC
%+X    extend:=narea < MINALLOC
%+D    if TRCSW > 0
%+D    then BegTrace("EXTGC("); EdSize(TrcBuf,request); Ed(TrcBuf,")=");
%+D         EdBool(TrcBuf,extend); OutTrace;
%+D    endif;
%-V    CLD108;  -- to be ABSOLUTELY SURE that GC moves correctly !!!
 end;

 Visible known("PRTCHR") PRTCHR;          -- ***************  NEW in 106
 import character c; export boolean res;  -- true if c is printable
 begin
       -----------------------------
       res:= (' ' <= c) and (c <= (126 qua character))
       -----------------------------
 end;

 Visible known("HASH") HASH;             -- **************** NEW in 106
 import infix(txtqnt) txt; export short integer val;
     -- ***** TEXT param, not STRING - SINT export, but must be in 0:255
 begin range(0:255) tmp,shift; range(0:MaxWord) sp,lp;
%+D    infix(string) s;
       sp:=txt.sp; lp:=txt.lp;
%+D    if TRCSW > 1
%+D    then s.nchr:=lp-sp;
%+D         s.chradr:=name(txt.ent.cha(sp));
%+D    endif;
       val:=0;
       if txt.ent <> none
       then shift:=0; tmp:=0;
            repeat while sp < lp
            do tmp:=tmp+bSHL(txt.ent.cha(sp) qua integer,shift);
               sp:=sp+1; shift:=2-shift;
            endrepeat;
            val:=bAND(tmp,255); ---  rem 256;
       endif;
%+D    if TRCSW > 4
%+D    then BegTrace("HASH("); Ed(TrcBuf,s); Ed(TrcBuf,")=");
%+D         EdWrd(TrcBuf,val); OutTrace;
%+D    endif;
 end;


 Visible known("ISOCHR") ISOCHR;          -- **************** NEW in 106
 import short integer x; export character c;     -- ISOCHAR
 begin
       -------------------------
       c := x qua character;
       -------------------------
 end;

 Visible known("ISORNK") ISORNK;          -- **************** NEW in 106
 import character c; export short integer x;     -- ISORANK
 begin
       -------------------------
       x := c qua integer;
       -------------------------
 end;


end;
