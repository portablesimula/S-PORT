 Module EBASE("iAPX286");
 begin insert ECOMN;
       -----------------------------------------------------------------
       ---  COPYRIGHT 1987 by                                        ---
       ---  Simula a.s.                                              ---
       ---                                                           ---
       ---              P O R T A B L E     S I M U L A              ---
       ---                                                           ---
       ---                 F O R    i A P X    2 8 6                 ---
       ---                                                           ---
       ---        T  H  E     E  N  V  I  R  O  N  M  E  N  T        ---
       ---                                                           ---
       ---  Selection Switches:                                      ---
       ---                                                           ---
       ---     D - Includes tracing dumps                            ---
       ---     M - Includes MS-DOS                                   ---
       ---     O - Includes MS-OS2                                   ---
       ---     X - Includes XENIX                                    ---
       ---     E - Extended mode -- 32 Bit 386                       ---
       -----------------------------------------------------------------

%-V -- because 108 generates STD without following CLD -----  pje
%-V -- This is the shortest code to generate CLD (???) -----  pje
%-V Visible Macro CLD108(0);
%-V begin APX_SMOVEI(1,name(b108),name(LTEN)) endmacro;

 visible const range(0:127) CRLFs(10)=(13,10,10,10,10,10,10,10,10,10);
 visible const range(0:127) NULLs(2)=(0,0);

 ------   MS-DOS & MS-OS2 --> SPORT Error code mapping   ------

%-X  visible const range(0:88) msStat(89) = (
%-X  -- status -- DOS-code --- Meaning ----------------------
%-X       0,   --    0
%-X      19,   --    1         Invalid function code
%-X       3,   --    2         File not found
%-X       3,   --    3         Path not found
%-X      29,   --    4         Too many open files (no open handles left)
%-X      18,   --    5         Access denied
%-X       1,   --    6         Invalid handle
%-X      19,   --    7         Memory control blocks destroyed
%-X      14,   --    8         Insufficient memory
%-X      19,   --    9         Invalid memory block address
%-X      19,   --   10         Invalid environment
%-X      19,   --   11         Invalid format
%-X      17,   --   12         Invalid access code
%-X      19,   --   13         Invalid data
%-X      19,   --   14         RESERVED
%-X      17,   --   15         Invalid drive
%-X      17,   --   16         Attempt to remove the current directory
%-X      17,   --   17         Not same device
%-X      17,   --   18         No more files
%-X      17,   --   19         Disk is write-protected
%-X      17,   --   20         Bad disk unit
%-X      17,   --   21         Drive not ready
%-X      17,   --   22         Invalid disk command
%-X      17,   --   23         CRC error
%-X      17,   --   24         Invalid length (disk operation)
%-X      17,   --   25         Seek error
%-X      17,   --   26         Not an MS-DOS disk
%-X      17,   --   27         Sector not found
%-X      17,   --   28         Out of paper
%-X      17,   --   29         Write fault
%-X      17,   --   30         Read fault
%-X      19,   --   31         General failure
%-X      17,   --   32         Sharing violation
%-X      17,   --   33         Lock violation
%-X      17,   --   34         Wrong disk
%-X      17,   --   35         FCB unavailable
%-X      19,   --   36         RESERVED
%-X      19,   --   37         RESERVED
%-X      19,   --   38         RESERVED
%-X      19,   --   39         RESERVED
%-X      19,   --   40         RESERVED
%-X      19,   --   41         RESERVED
%-X      19,   --   42         RESERVED
%-X      19,   --   43         RESERVED
%-X      19,   --   44         RESERVED
%-X      19,   --   45         RESERVED
%-X      19,   --   46         RESERVED
%-X      19,   --   47         RESERVED
%-X      19,   --   48         RESERVED
%-X      19,   --   49         RESERVED
%-X      17,   --   50         Network request not supported
%-X      17,   --   51         Remote computer not listening
%-X      17,   --   52         Duplicate name on network
%-X      17,   --   53         Network name not found
%-X      17,   --   54         Network busy
%-X      17,   --   55         Network device no longer exists
%-X      17,   --   56         Net BIOS command limit exceeded
%-X      17,   --   57         Network adapter harware error
%-X      17,   --   58         Incorrect response from network
%-X      17,   --   59         Unexpected network error
%-X      17,   --   60         Incompatible remote adapt
%-X      17,   --   61         Print queue full
%-X      17,   --   62         Queue not full
%-X      17,   --   63         Not enough space for print file
%-X      17,   --   64         Network name was deleted
%-X      17,   --   65         Access denied
%-X      17,   --   66         Network device type incorrect
%-X      17,   --   67         Network name not found
%-X      17,   --   68         Network name limit exceeded
%-X      17,   --   69         Net BIOS session limit exceeded
%-X      17,   --   70         Temporarily paused
%-X      17,   --   71         Network request not accepted
%-X      17,   --   72         Print or disk redirection is paused
%-X      19,   --   73         RESERVED
%-X      19,   --   74         RESERVED
%-X      19,   --   75         RESERVED
%-X      19,   --   76         RESERVED
%-X      19,   --   77         RESERVED
%-X      19,   --   78         RESERVED
%-X      19,   --   79         RESERVED
%-X      17,   --   80         File exists
%-X      19,   --   81         RESERVED
%-X      19,   --   82         Cannot make
%-X      19,   --   83         Interrupt 24 failure
%-X      19,   --   84         Out of structures
%-X      17,   --   85         Already assigned
%-X      19,   --   86         Invalid password
%-X      19,   --   87         Invalid parameter
%-X      17    --   88         Net write fault
%-X   );
%title ***  XENIX --> SPORT Error code mapping  ***

%+X  visible const range(0:45) UnixStat(46) = (
%+X  -- status -- XENIX-code --- Meaning ----------------------
%+X       0,   --   0
%+X      17,   --   1 EPERM    Not owner
%+X       2,   --   2 ENOENT   No such file or directory
%+X      19,   --   3 ESRCH    No such process
%+X      19,   --   4 EINTR    Interrupted system call
%+X      17,   --   5 EIO      I/O error
%+X      17,   --   6 ENXIO    No such device or address
%+X      17,   --   7 E2BIG    Argument list too long
%+X      17,   --   8 ENOEXEC  Exec format error
%+X       1,   --   9 EBADF    Bad file number
%+X      19,   --  10 ECHILD   No child process
%+X      19,   --  11 EAGAIN   No more processes
%+X      14,   --  12 ENOMEM   Not enough space
%+X      17,   --  13 EACCES   Permission denied
%+X      19,   --  14 EFAULT   Bad address
%+X      17,   --  15 ENOTBLK  Block device required
%+X      17,   --  16 EBUSY    Device busy
%+X       4,   --  17 EEXIST   File exists
%+X      17,   --  18 EXDEV    Cross-device link
%+X      17,   --  19 ENODEV   No such device
%+X      10,   --  20 ENODIR   Not a directory
%+X       8,   --  21 EISDIR   Is a directory (can't write on it)
%+X      17,   --  22 EINVAL   Invalid argument
%+X      17,   --  23 ENFILE   File table overflow
%+X      29,   --  24 EMFILE   Too many open files (max 20)
%+X      17,   --  25 ENOTTY   Not a character device
%+X      17,   --  26 ETXTBSY  Text file busy
%+X      17,   --  27 EFBIG    File too large
%+X      15,   --  28 ENOSPC   No space left on device
%+X      17,   --  29 ESPIPE   Illegal seek (on a pipe)
%+X      20,   --  30 EROFS    Read-only file system
%+X      17,   --  31 EMLINK   Too many links (max 1000)
%+X      17,   --  32 EPIPE    Broken pipe
%+X      27,   --  33 EDOM     Math arg out of domain of func
%+X      19,   --  34 ERANGE   Math result not representable
%+X      17,   --  35 EUCLEAN  File system needs cleaning
%+X      19,   --  36 EDEADLK  Would deadlock
%+X      19,   --  37 ENOTNAM  Not a name file
%+X      19,   --  38 ENAVAIL  Not available
%+X      19,   --  39 EISNAM   A name file (in wrong context)
%+X      19,   --  40          RESERVED
%+X      19,   --  41          RESERVED
%+X      19,   --  42          RESERVED
%+X      19,   --  43 ENOMSG   No message of desired type
%+X      19,   --  44 EIDRM    Identifier removed
%+X      17    --  45 ENOLCK   No locks available
%+X   );

%title ******    E N V I R    U T I L I T I E S    ******
Visible Routine Option; import character c; export range(0:10) v;
begin if ParBlk=none then v:=0
      else v:=ParBlk.OPTN(c qua integer - ISO_AA) qua integer endif;
end;

Visible Routine ASCIIZ2String;
import ref(ASCIIZ) asc;
%-E    range(0:MaxWord) mlng;
%+E    integer          mlng;
export infix(String) S;
begin S.chradr:=Ref2Name(asc);
      S.nchr:=mlng-APX_SFINDI(0 qua character,mlng,S.chradr);
end;

%-M Visible Routine String2ASCIIZ
%-M import infix(String) S; export ref(ASCIIZ) asc;
%-M begin var(S.chradr)(S.nchr-1):=0 qua character; asc:=Name2Ref(S.chradr) end;

Visible Known("SYSPRI") SYSPRI; import infix(String) im;
begin range(0:40) s;
%+O   range(0:MaxWord) cnt;
      s:=OsStat; OsStat:=0;
      if wSYSPRI <> NoBody then Call pSYSPRI(wSYSPRI) (im); goto E1 endif;
      --- Do not check OsStat in tracing output case
      if im.nchr > 0
      then
%+M        DOS_WRITE(K_systrace,im.nchr,im.chradr);
%+O        OS2_WRITE(K_systrace,name2ref(im.chradr),im.nchr,name2ref(@cnt));
%+X        XNX_WRITE(im.nchr,name2ref(im.chradr),K_systrace);
           OsStat:=0;
      endif;
%+M   DOS_WRITE(K_systrace,2,@CRLFs);
%+O   OS2_WRITE(K_systrace,name2ref(@CRLFs),2,name2ref(@cnt));
%+X   XNX_WRITE(2,name2ref(@CRLFs),K_systrace);
E1:   OsStat:=s;
end;

Visible Routine SYSPRT; import infix(String) im;
begin range(0:40) s;
%+O   range(0:MaxWord) cnt;
      s:=OsStat; OsStat:=0;
      --- Do not check OsStat in tracing output case
      if im.nchr > 0
      then
%+M        DOS_WRITE(K_systrace,im.nchr,im.chradr);
%+O        OS2_WRITE(K_systrace,name2ref(im.chradr),im.nchr,name2ref(@cnt));
%+X        XNX_WRITE(im.nchr,name2ref(im.chradr),K_systrace);
           OsStat:=0;
      endif;
      OsStat:=s;
end;

%+D Visible Routine STAT; import infix(String) idn; range(0:40) s;
%+D begin
%+D       if (TRCSW+ERRSW) > 0
%+D       then BegTrace(idn); Ed(TrcBuf,": Status := ");
%+D            EdWrd(TrcBuf,s); OutTrace;
%+D       endif;
%+D       status:=s;
%+D end;

%-D Visible Macro STAT(2);
%-D begin status:=%2 endmacro;

Visible Macro OS_STAT(1);
begin
%+D  OS_set_STAT(%1);
%-D  OS_set_STAT;
endmacro;
Visible Routine OS_set_STAT;
%+D                          import infix(String) idn;
begin range(0:MaxByte) stats;
%-E   range(0:MaxWord) s;
%+E   integer          s;
      s:=OsStat; OsStat:=0;
%+M   stats:=if s>88 then 19 else msStat(s);
%+O   stats:=if s>88 then 19 else msStat(s);
%+X   stats:=if s>45 then 19 else UnixStat(s);
%+D   if (TRCSW+ERRSW) > 0
%+D   then BegTrace(idn);
%+DM       Ed(TrcBuf,": MS-DOS Status: ");
%+DO       Ed(TrcBuf,": MS-OS2 Status: ");
%+DX       Ed(TrcBuf,": UNIX Status: ");
%+D        EdWrd(TrcBuf,s); Ed(TrcBuf," ==> Status := ");
%+D        EdWrd(TrcBuf,stats); OutTrace;
%+D   endif;
      Status:=stats;
end;

%+D Visible Routine FILSTAT;
%+D import infix(String) idn; range(0:255) key; range(0:40) s;
%+D begin
%+D       if (TRCSW+ERRSW+FILSW) > 0
%+D       then BegTrace(idn);
%+D            if key>0 then Ed(TrcBuf," on "); EdFileName(TrcBuf,key) endif
%+D            Ed(TrcBuf,": Status := "); EdWrd(TrcBuf,s); OutTrace;
%+D       endif;
%+D       status:=s;
%+D end;

%-D Visible Macro FILSTAT(3);
%-D begin status:=%3 endmacro;

Visible Routine GDSNAM;  --- get_dsetname;
import range(1:255) key; infix(String) dsetname;
export integer filled;
begin infix(String) S;
%-E   range(0:MaxWord) h,n;
%+E   integer          h,n;
%+D   if TRCSW > 0
%+D   then BegTrace("GDSNAM("); EdWrd(TrcBuf,key); EdChar(TrcBuf,',');
%+D        Ed(TrcBuf,dsetname); EdChar(TrcBuf,')'); OutTrace;
%+D   endif;
      h:=key-1; filled:=0;
      if (key > 0) and (key <= nsysfile)
      then case 0:nsysfile (h)
           when K_sysin:    S:="SYSIN";
           when K_sysout:   S:="SYSOUT";
           when K_systrace: S:="SYSTRACE";
%+M        when K_sysaux:   S:="SYSAUX";
%+M        when K_sysprn:   S:="SYSPRN";
           endcase;
      elsif FTAB(key).FNAM.nchr=0
      then STAT("GDSNAM-1",xq_invkey); goto E1;
      else S.chradr:=name(FTAB(key).FNAM.chr);
           S.nchr:=FTAB(key).FNAM.nchr;
           if dsetname.nchr < S.nchr
           then STAT("GDSNAM-2",xq_tshort); goto E2 endif;
      endif;
      --- Move the characters:
      SMOVE(S,dsetname,' '); filled:=S.nchr;
%+D   if TRCSW > 0
%+D   then BegTrace("GDSNAM: Filled = "); EdWrd(TrcBuf,filled);
%+D        Ed(TrcBuf,", Item = "); Ed(TrcBuf,dsetname); OutTrace;
%+D   endif;
E1:E2:end;

Visible Routine SMOVE; import infix(string) src,dst; character fill;
begin integer n,r; n:=src.nchr; r:=dst.nchr-n;
      if r < 0 then n:=dst.nchr; r:=0 endif;
      if n > 0 then APX_SMOVEI(n,dst.chradr,src.chradr) endif;
      if r > 0 then APX_SFILL(fill,r,name(var(dst.chradr)(n))) endif;
end;

Visible Routine STEQ; --- Test String Equal:  val := T = V;
import infix(String) T,V; export Boolean val;
begin if T.nchr <> V.nchr then val:=false else
      val:=APX_SCMPEQ(T.nchr,T.chradr,V.chradr) endif;
end;
%title ***   E D I T I N G   ***

Visible Routine PUTINT;
import infix(string) item; integer val;
begin integer v,c;
%-E   short integer si;
%+E   integer       si;
      si := item.nchr - 1; v := val / 10;
      if val < 0 then c:=(v*10)-val; v:= -v else c:=val-(v*10); endif;
      if si < 0 then STAT("PUTINT-1",xq_tshort); goto E1; endif;
      var(item.chradr)(si):=(c+ISO_0) qua character; si:=si-1;
      repeat while v > 0
      do if si < 0 then STAT("PUTINT-2",xq_tshort); goto E2; endif;
         var(item.chradr)(si):=((v rem 10)+ISO_0) qua character;
         v := v / 10; si := si - 1;
      endrepeat;
      if val < 0
      then if si < 0 then STAT("PUTINT-3",xq_tshort); goto E3; endif;
           var(item.chradr)(si) := '-'; si := si - 1;
      endif;
      repeat while si >= 0
      do var(item.chradr)(si):=' '; si:=si-1; endrepeat;
E1:E2:E3:end;

Visible Routine EdInt; import ref(EdBuff) BF; integer i;
begin infix(String) s; range(0:127) p,d,st; integer ii;
      st:=status;
      if i<0 then EdChar(BF,'-'); i:=-i endif;
      p:=BF.pos;
---   d:=1; ii:=i; repeat ii:=ii/10 while ii<>0 do d:=d+1 endrepeat;
      if    i<10         then d:=1 elsif i<100         then d:=2
      elsif i<1000       then d:=3 elsif i<10000       then d:=4
      elsif i<100000     then d:=5 elsif i<1000000     then d:=6
      elsif i<10000000   then d:=7 elsif i<100000000   then d:=8
      elsif i<1000000000 then d:=9 else d:=11 endif;
      if (p+d) >= BF.nchr then PrintOut(BF); p:=0 endif;
      BF.pos:=p+d; s.chradr:=@BF.chr(p);
      s.nchr:=d; PUTINT(s,i); status:=st;
end;

Visible Routine PUTWRD;
import infix(String) item;
%-E    range(0:MaxWord) val;
%+E    integer          val;
begin
%-E   range(0:MaxWord) n;
%+E   integer          n;
      n := item.nchr;
      repeat if n = 0 then STAT("PUTWRD",xq_tshort); goto E1 endif;
             n:=n-1;
             var(item.chradr)(n):=(ISO_0+(val rem 10)) qua character;
             val := val / 10;
      while val > 0 do endrepeat;
      repeat while n > 0 do n:=n-1; var(item.chradr)(n):=' ' endrepeat;
E1:end;

%title ******    D E - E D I T I N G   ******
define  I_MAX10 = 214748364;
define  I_MAX10m = 214748363;

Visible Routine GETINT;  --- get_int;
import infix(string) item; export integer val;
begin short integer ps; character c; Boolean plus;
%+D   if TRCSW > 3
%+D   then begtrace("GETINT("); ed(trcbuf,item);
%+D        edchar(trcbuf,')'); outtrace;
%+D   endif;
      val:=0; ps:=0;  --- Scan off all leading blanks ---
      repeat if ps>=item.nchr then STAT("GETINT-1",xq_nonnum); goto E1;
             else c:=var(item.chradr)(ps); ps:=ps+1 endif;
      while c = ' ' do endrepeat;

      if    c = '+' then plus := true;
      elsif c = '-' then plus := false;
      else plus := true; goto FSTDIG endif;
      --- If leading + or - : get next non-blank character
      repeat if ps>=item.nchr then STAT("GETINT-2",xq_nonnum); goto E2;
             else c:=var(item.chradr)(ps); ps:=ps+1 endif;
      while c = ' ' do endrepeat;
FSTDIG:--- Convert digit to 0..9, or error exit
      if (c >= '0') and (c <= '9')
      then val := ISO_0 - (c qua integer);
      else STAT("GETINT-3",xq_nonnum); goto E3 endif;

      repeat while ps < item.nchr   --- While more chars in item:
      do c:=var(item.chradr)(ps); ps:=ps+1;
         --- Convert if digit
         if (c >= '0') and (c <= '9')
         then if val <= -I_MAX10  -- minint//10;
              then if ( (val<-I_MAX10) or (c='9') )
                   then STAT("GETINT-4",xq_value); val:=0; endif;
                   -- zero val to enable continued scanning
              endif;
              val:=(val*10)+ISO_0-(c qua integer);
         else ps:=ps-1; goto L4; endif;
      endrepeat;

L4:   itemsize := ps;
      if plus then if val<>(-2147483647-1) -- TEMP: minint
                   then val:= -val
                   else STAT("GETINT-5",xq_value); goto E5 endif;
      endif;

E1:E2:E3:E5:end;
%title ******    E N V I R    E D I T I N G    ******

Visible Routine BegTrace; import infix(String) id;
begin PrintOut(TrcBuf); Ed(TrcBuf,id) end;

Visible Routine OutTrace; begin PrintOut(TrcBuf) end;

Visible routine PickupEdtbuf; export infix(string) s;
begin if edtbuffer.pos > 0
      then s.nchr:=edtbuffer.pos; edtbuffer.pos:=0;
           s.chradr:=@edtbuffer.chr;
      else s:=nostring endif;
end;

Visible routine EdEdtbuf; import infix(string) s;
begin ed(ref(edtbuffer),s) end;

Visible routine EdcharEdt; import character c;
begin edchar(ref(edtbuffer),c) end;
---       if edtbuffer.pos >= 79
---       then Printout(ref(edtbuffer)); edtbuffer.pos:=0 endif;
---       edtBuffer(edtbuffer.pos):=c;
---       edtBuffer.pos:=edtBuffer.pos+1;
--- end;

Visible Routine Pickup; import ref(EdBuff) BF; export infix(String) s;
begin if BF.pos=0 then s:=nostring
      else s.chradr:=@BF.chr; s.nchr:=BF.pos; BF.pos:=0 endif
end;

Visible Routine PrintOut; import ref(EdBuff) B;
begin if B.pos>0 then SYSPRI(Pickup(B)) endif end;

Visible Routine SetPos; import ref(EdBuff) BF; range(0:132) p;
begin if p<1 then p:=0 elsif p>=BF.nchr then p:=BF.nchr-1 endif;
      repeat while p>BF.pos do EdChar(BF,' ') endrepeat; BF.pos:=p;
end;

Visible Routine Ed; import ref(EdBuff) BF; infix(String) t;
begin infix(String) s; range(0:132) p; p:=BF.pos;
      if (p+t.nchr) >= BF.nchr
      then PrintOut(BF); p:=0;
           if t.nchr>BF.nchr then t.nchr:=BF.nchr endif;
      endif;
      s.chradr:=@BF.chr(p); s.nchr:=t.nchr;
      APX_SMOVEI(s.nchr,s.chradr,t.chradr); BF.pos:=p+t.nchr;
end;

Visible Routine EdFileName;
import ref(EdBuff) BF; range(1:MaxFile) key;
begin infix(String) s; range(0:127) p,st,trc;
      p:=BF.pos; st:=status;
%+D   trc:=TRCSW; TRCSW:=0;
      if (p+24) >= BF.nchr then PrintOut(BF); p:=0 endif
      s.chradr:=@BF.chr(p); s.nchr:=BF.nchr-p;
      BF.pos:=p+GDSNAM(key,s); status:=st;
%+D   TRCSW:=trc;
end;

Visible Routine EdOSID; import ref(EdBuff) BF;
begin
%+M   Ed(BF,"DOS ");  EdWrd(BF,OSID.ver);
%+M   EdChar(BF,'.'); EdWrd(BF,OSID.rev);
%+O   Ed(BF,"OS/2 "); EdWrd(BF,OSID.AsByte(1)/10);
%+O   EdChar(BF,'.'); EdWrd(BF,OSID.AsByte(0));
%+X   Ed(BF,ASCIIZ2String(name2ref(@OSID.sysname),10)); EdChar(BF,' ');
%+X   Ed(BF,ASCIIZ2String(name2ref(@OSID.release),10)); EdChar(BF,' ');
%+X   Ed(BF,ASCIIZ2String(name2ref(@OSID.version),10)); EdChar(BF,' ');
%+X   EdWrd(BF,OSID.OEM); EdChar(BF,':');
%+X   Ed(BF,ASCIIZ2String(name2ref(@OSID.machine),10)); EdChar(BF,' ');
end;

Visible Routine EdWrd;
import ref(EdBuff) BF;
%-E    range(0:MaxWord) i;
%+E    integer          i;
begin infix(String) s; range(0:127) p,d,st;
      p:=BF.pos; st:=status;
      if i<0 then EdChar(BF,'-'); i:=-i endif;
      if i<10      then d:=1 elsif i<100   then d:=2
      elsif i<1000 then d:=3 elsif i<10000 then d:=4
      else d:=5 endif;
      if (p+d) >= BF.nchr then PrintOut(BF); p:=0 endif;
      BF.pos:=p+d; s.chradr:=@BF.chr(p);
      s.nchr:=d; PUTWRD(s,i); status:=st;
end;

Visible Routine EdChar; import ref(EdBuff) BF; character c;
begin range(0:132) p; p:=BF.pos;
      if (p+1) >= BF.nchr then PrintOut(BF); p:=0 endif;
      BF.pos:=p+1; BF.chr(p):=c;
end;

Visible Routine EdChars;
import ref(EdBuff) BF; name(character) c; range(0:132) n;
begin infix(String) s; s.chradr:=c; s.nchr:=n; Ed(BF,s) end;

end;
