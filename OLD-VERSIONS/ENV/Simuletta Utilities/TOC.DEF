Module TOC("iAPX-386");
begin insert UCOMN,UBASE;
       -----------------------------------------------------------------
       ---  COPYRIGHT 1989 by                                        ---
       ---  Simula a.s., Oslo, Norway                                ---
       ---                                                           ---
       ---                 . L I B    A N A L Y Z E R                ---
       ---                                                           ---
       ---  Selection Switches:                                      ---
       ---                                                           ---
       ---     C - Includes Consistency Tests                        ---
       ---     D - Includes tracing dumps                            ---
       -----------------------------------------------------------------
Define MxpExt=4;      -- I.e. max  1024 Local EXTERNs  (per MODULE)
Define MxpMod=4;      -- I.e. max  1024 Global MODULEs

Integer Magic;        -- Magic Number (First byte in file)
Boolean Verbose;
Unsigned Inpt;
Word InFileName;
Dword nBlk;    -- Number of Dictionary Blocks left
Dword BlkRef;  -- File Position of Current Dictionary Block
Infix(DATABUF) DicBlk;          -- Current Dictionary Block
Word nMod; Ref(RefBlock) MODMAP(MxpMod);   -- All Defined OBJ-MODULEs

Record DATABUF;
begin range(0:MaxWord) nxt;   -- Next available byte pos in byt(0:..)
      character byt(512);
end;

Record OBJMODULE;
begin Word Ident;      -- File or Element Name
      Word EltRef;     -- Element Reference
      Word nExt; Ref(WrdBlock) ExtTab(MxpExt); -- All Locally Externals
end;

Routine FindModule; import Word EltRef; export ref(OBJMODULE) Mod;
begin Word modx; modx:=nMod;
      repeat while modx.val > 0
      do Mod:=MODMAP(modx.HI).Elt(modx.LO);
         modx.val:=modx.val-1;
         if Mod.EltRef=EltRef then goto E1 endif;
      endrepeat;
      nMod.val:=nMod.val+1;
      if nMod.HI >= MxpMod then CAPERR("Module-Table Overflow") endif;
      if MODMAP(nMod.HI)=none
      then MODMAP(nMod.HI):=NEWOBJ(size(RefBlock)) endif;
      Mod:=NEWOBJ(Size(OBJMODULE)); Mod.EltRef:=EltRef;
      MODMAP(nMod.HI).Elt(nMod.LO):=Mod; modx:=nMod;
E1:end;

Routine NewEXTERN; import ref(OBJMODULE) Mod; Word Ident;
begin Word xSmb,extx,nExt; nExt:=Mod.nExt; extx:=nExt;
      repeat while extx.val > 0
      do xSmb:=Mod.ExtTab(extx.HI).Elt(extx.LO);
         extx.val:=extx.val-1;
         if xSmb=Ident then goto E1 endif;
      endrepeat;
      nExt.val:=nExt.val+1;
      if nExt.HI >= MxpExt then CAPERR("External-Table Overflow") endif;
      if Mod.ExtTab(nExt.HI)=none
      then Mod.ExtTab(nExt.HI):=NEWOBJ(size(WrdBlock)) endif;
      Mod.ExtTab(nExt.HI).Elt(nExt.LO):=Ident; Mod.nExt:=nExt;
E1:end;

Routine Summary;
begin ref(OBJMODULE) Mod; Word modx,extx,xSmb;
      modx.val:=0; repeat while modx.val < nMod.val
      do modx.val:=modx.val+1; Mod:=MODMAP(modx.HI).Elt(modx.LO);
         Ed(EdtBuf,"MODULE "); EdSymb(EdtBuf,Mod.Ident);
         Outimage; SetPos(EdtBuf,6);
         extx.val:=0; repeat while extx.val < Mod.nExt.val
         do extx.val:=extx.val+1;
            xSmb:=Mod.ExtTab(extx.HI).Elt(extx.LO);
            if EdtBuf.Pos < 50 then EdChar(EdtBuf,' ')
            else Outimage; SetPos(EdtBuf,7) endif;
            EdSymb(EdtBuf,xSmb);
         endrepeat; OutImage;
      endrepeat;
end;

%title ***    F  I  L  E     H  E  A  D    ***

Routine FileHead;
begin Unsigned i,n; Word BlkLng; character FilHdr(16);
%+D   if TrcSw > 1
%+D   then Ed(TrcBuf,".LIB HEAD SCANNER: ");
%+D        EdSymb(TrcBuf,InFileName); OutTrace;
%+D   endif;
      READ(Inpt,16,@FilHdr,n);
      if OsStat<>0 then ERROR("FileHead")
      elsif n<>16 then EndFile:=true endif;

%+D   if TrcSw > 1 then HexDump(0,16,Name(FilHdr)) endif;
    
      Magic:=FilHdr(0) qua integer;

      BlkLng.LO:=FilHdr(1) qua integer;
      BlkLng.HI:=FilHdr(2) qua integer;
      BlkLng.val:=BlkLng.val+3;

      BlkRef.LO   := FilHdr(3) qua integer;
      BlkRef.LOHI := FilHdr(4) qua integer;
      BlkRef.HILO := FilHdr(5) qua integer;
      BlkRef.HI   := FilHdr(6) qua integer;

      nBlk.val:=0;
      nBlk.LO   := FilHdr(7) qua integer;
      nBlk.LOHI := FilHdr(8) qua integer;
--    nBlk.HILO := FilHdr(9) qua integer;
--    nBlk.HI   := FilHdr(10) qua integer;

      Ed(EdtBuf,"Dictionary Start Address:      ");
      EdHex(EdtBuf,BlkRef.val,8); Ed(EdtBuf," = ");
      EdInt(EdtBuf,BlkRef.val); OutImage;

      Ed(EdtBuf,"Number of Dictionary Blocks:   ");
      EdHex(EdtBuf,nBlk.val,8); Ed(EdtBuf," = ");
      EdInt(EdtBuf,nBlk.val); OutImage;

      Ed(EdtBuf,"Object Member Allignment Factor:   ");
      EdHex(EdtBuf,BlkLng.val,4); Ed(EdtBuf," = ");
      EdInt(EdtBuf,BlkLng.val); OutImage;
end;
%title ***    F  I  L  E    T  A  I  L    ***

Routine FileTail;
begin integer Loc; Unsigned i,n,lng,p,p0; Word smbx; Character c;
      ref(OBJMODULE) Mod; Dword EltRef
%+D   if TrcSw > 1
%+D   then OutTrace; Ed(TrcBuf,".LIB TAIL SCANNER: ");
%+D        EdSymb(TrcBuf,InFileName); OutTrace;
%+D   endif;
      --- Locate Dictionary Block ---
      LOCATE(Inpt,0,BlkRef.val,Loc);
      if OsStat <> 0 then ERROR("FileTail-1"); OsStat:=0 endif;
      --- Read Dictionary Block ---
      READ(Inpt,512,@DicBlk.byt,n);
      if OsStat<>0 then ERROR("FileTail-2")
      elsif n <> 512 then EndFile:=true endif;

%+D   if    TrcSw>3 then HexDump(BlkRef.val,512,Name(DicBlk.byt(0)))
%+D   elsif TrcSw>1 then HexDump(BlkRef.val,38,Name(DicBlk.byt(0))) endif;

      p:=38;
      repeat p:=wAND(p+1,-2); p0:=p;
             lng:=DicBlk.byt(p) qua integer; p:=p+1;
      while lng <> 0
      do n:=lng; repeat while n>0
         do c:=DicBlk.byt(p) qua character; p:=p+1;
            n:=n-1; if n>0 then EdChar(EdtBuf,c) endif;
         endrepeat;
        if c <> '!' then EdChar(EdtBuf,c) endif;
        smbx:=DICDEF(PickUp(EdtBuf));
        EltRef.val:=0;
        EltRef.LO:=DicBlk.byt(p) qua integer; p:=p+1;
        EltRef.LOHI:=DicBlk.byt(p) qua integer; p:=p+1;
        Mod:=FindModule(EltRef.AsWord);
        EltRef.val:=EltRef.val*16;
%+D     if TrcSw > 3
%+D     then Ed(TrcBuf,"Symb "); EdHex(TrcBuf,BlkRef.val+p0,6);
%+D          EdChar(TrcBuf,':'); EdSymb(TrcBuf,smbx);
%+D          EdChar(TrcBuf,'/'); EdHex(TrcBuf,EltRef.val,6);
%+D          OutTrace;
%+D     elsif TrcSw > 0
%+D     then if TrcBuf.Pos > 60 then OutTrace endif; 
%+D          EdChar(TrcBuf,' '); EdSymb(TrcBuf,smbx);
%+D          EdChar(TrcBuf,'='); EdHex(TrcBuf,EltRef.val,6);
%+D     endif
        if c='!' then Mod.Ident:=smbx;
        else NewEXTERN(Mod,smbx) endif;
      endrepeat;
%+D   if TrcBuf.Pos > 0 then OutTrace endif; 
end;
%title ***   M  O  N  I  T  O  R   ***

Routine GetInt; import infix(String) itm; export Unsigned val;
begin character c; Unsigned i; i:=0; val:=0;
      repeat c:=if i<itm.nchr then var(itm.chradr)(i) else 'x'
      while c=' ' do i:=i+1 endrepeat;
      repeat c:=if i<itm.nchr then var(itm.chradr)(i) else 'x'
      while (c>='0') and (c<='9')
      do val:=(val*10)+(c qua integer -48); i:=i+1 endrepeat;
end;

Visible Routine MONITOR; import infix(String) verid;
begin Unsigned i; infix(String) par,val; Character opt;

      INITIATE; Verbose:=false;
      i:=1; repeat par:=GetPar(i); i:=i+1 while par.nchr <> 0
      do
-- ???   Ed(EdtBuf,"Parameter: "); Ed(EdtBuf,par); OutImage; 
         if (par.nchr > 1) and (var(par.chradr) = '-')
         then opt:=var(par.chradr)(1);   
-- ???        Ed(EdtBuf,"Option: "); EdChar(EdtBuf,opt); OutImage;
              if    opt='V' then Ed(EdtBuf,"SIMULA Utility Software, Version ")
                                 Ed(EdtBuf,verid); PrintOut(EdtBuf);
              elsif opt='v' then Verbose:=true
              else if (par.nchr > 2)
                   then val.chradr:=name(var(par.chradr)(2));
                        val.nchr:=par.nchr-2;
                   else i:=i+1; val:=GetPar(i) endif;
-- ???             Ed(EdtBuf,"  Value: "); Ed(EdtBuf,val); OutImage; 
%+D                if opt='t' then TrcSw:=GetInt(val)
%+D                else
                        Ed(EdtBuf,"cnv: Illegal option: -");
-- ???                  EdChar(EdtBuf,opt); Ed(EdtBuf,val); OutImage; 
%+D                endif;
              endif;
         elsif InFileName.val=0 then InFileName:=DICDEF(par)
         else Ed(EdtBuf,"cnv: Illegal parameter: ");
              Ed(EdtBuf,par); OutImage;
         endif;
      endrepeat;

      if Verbose
      then Ed(EdtBuf,".LIB Analyzer"); OutImage;
           Ed(EdtBuf,"Copyright (C) Simula a.s. 1989."); OutImage;
      endif;

      if InFileName.val=0
      then Prt("toc: Insufficient arguments");
           Prt("Usage: toc {opt}.. file");
           Prt("       -V         # Print Version Ident");
           Prt("       -v         # Set Verbose Mode");
%+D        Prt("       -t level   # Tracing Dumps");
           goto T1;
      endif;
 
      if InFileName.val <> 0
      then Inpt:=Open(InFileName,".lib",accread); 
           if EndFile then
           else FileHead;
                if Magic <> 240
                then ERROR("Bad Magic -- File is not a Library");
                else repeat while nBlk.val > 0
                     do nBlk.val:=nBlk.val-1;
                        FileTail; BlkRef.val:=BlkRef.val+512;
                     endrepeat;
                endif;
           endif;
           Close(Inpt); Inpt:=0;
           Summary;
      endif;

   T1:if Verbose
      then Ed(EdtBuf,"End Toc of "); EdSymb(EdtBuf,InFileName);
           Ed(EdtBuf,",  Errors: "); EdInt(EdtBuf,ErrCnt); OutImage;
      endif;
end;

end;
