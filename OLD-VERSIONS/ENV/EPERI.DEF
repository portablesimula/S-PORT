 Module EPERI("iAPX286");
%+D begin insert ECOMN,EBASE,EDUMP,ECENT,EINIM;
%-D begin insert ECOMN,EBASE,      ECENT,EINIM;
       -----------------------------------------------------------------
       ---  COPYRIGHT 1987 by                                        ---
       ---  Simula a.s.                                              ---
       ---                                                           ---
       ---              P O R T A B L E     S I M U L A              ---
       ---                                                           ---
       ---                 F O R    i A P X    2 8 6                 ---
       ---                                                           ---
       ---                                                           ---
       ---        T  H  E     E  N  V  I  R  O  N  M  E  N  T        ---
       ---                                                           ---
       ---  Selection Switches:                                      ---
       ---     D - Includes tracing dumps                            ---
       ---     M - Includes MS-DOS                                   ---
       ---     O - Includes MS-OS2                                   ---
       ---     X - Includes XENIX                                    ---
       ---     E - Extended mode -- 32 Bit 386                       ---
       -----------------------------------------------------------------


--- -- %+E Visible Sysroutine("S?CODE") APX_CODE;
--- %+E Visible Sysroutine("GTCODE") APX_CODE;
--- %+E import ref() cadr;                -- Reference to Code Memory
--- %+E        integer ofst;              -- Offset within Code Memory
--- %+E export range(0:MaxByte) val;      -- Byte Content of Code Memory
--- %+E end;

--- -- Inline q-Coding: for UNIX    --- LATER !!!!!!!!!!!!!!!
------------------------------------------------------------------------
--- -- POPR   ESI                                                     --
--- -- POPR   EAX                                                     --
--- -- LOAD   AL,CS:[EAX+ESI]                                         --
--- -- PUSHR  AL                                                      --
------------------------------------------------------------------------

%title ***   B R E A K O   -   I N T E R A   ***
Visible Routine BREAKO;  --- breakoutimage;
import range(1:255) key; infix(String) image;
begin
%-E   range(0:MaxWord) n;
%+E   integer          n;
%+D   if TRCSW > 2
%+D   then BegTrace("BREAKOUT("); EdWrd(TrcBuf,key);
%+D        EdChar(TrcBuf,')'); OutTrace;
%+D   endif;
      if image.nchr > 0      --- Write buffer to file
      then
%+M   L:   n:=DOS_WRITE(key-1,image.nchr,image.chradr);
%+O        OS2_WRITE(key-1,name2ref(image.chradr),image.nchr,name2ref(@n));
%+X        n:=XNX_WRITE(image.nchr,name2ref(image.chradr),key-1);
           if OsStat <> 0 then OS_STAT("BREAKO-1")
           elsif n <> image.nchr
           then
%+M             if var(image.chradr)(n) qua integer = 26
%+M             then var(image.chradr)(n):='Z'
%+M                  image.chradr:=name(var(image.chradr)(n));
%+M                  image.nchr:=image.nchr-n; goto L;
%+M             endif;
                STAT("BREAKO-2",xq_ffull); 
           endif;
      endif;
end;

Visible known("INTERA") INTERA; export Boolean res;
begin
      res:=true;
end;
%title ***   S Y S P R O   ***
Visible known("SYSPRO") SYSPRO;  --- sysprompt
import infix(String) msg,img; export integer filled;
begin infix(String) cmd;
      character c0,c1; -- SKAL FJERNES
%+O   range(0:MaxWord) n;
      if wSYSPRO <> NoBody
      then filled:=Call pSYSPRO(wSYSPRO) (msg,img) goto E1 endif;
L1:   if msg.nchr > 0      --- Write buffer to file
      then
%+M        DOS_WRITE(K_systrace,msg.nchr,msg.chradr);
%+O        OS2_WRITE(K_systrace,name2ref(msg.chradr),msg.nchr,name2ref(@n));
%+X        XNX_WRITE(msg.nchr,name2ref(msg.chradr),K_systrace);
           if OsStat <> 0 then OS_STAT("SYSPRO-1"); goto E2 endif;
      endif;
      c0:=var(img.chradr); c1:=var(img.chradr)(1);            -- SKAL FJERNES
      filled:=INIMAG(K_sysin+1,img);
      if filled=0                                             -- SKAL FJERNES
      then var(img.chradr):=c0; var(img.chradr)(1):=c1 endif; -- SKAL FJERNES

%+M   DOS_WRITE(K_systrace,2,@CRLFs);                         OsStat:=0;
%+O   OS2_WRITE(K_systrace,name2ref(@CRLFs),2,name2ref(@n));  OsStat:=0;
%+X   XNX_WRITE(2,name2ref(@CRLFs),K_systrace);               OsStat:=0;
      if (var(img.chradr) = '@')
      or (var(img.chradr) qua integer = 27) -- 27=ESC
      then cmd.chradr:=name(var(img.chradr)(1)); cmd.nchr:=filled-1;
           OSCMND(cmd); SYSPRI(nostring); OsStat:=0; goto L1;
      endif;
E1:E2:end;

%title ***   M A X L O C   -   C H K P N T   ***
Visible Routine MAXLOC;  --- maxloc;
import range(1:255) key; export integer loc;
begin
      loc := maxint - 1;  ---   T E M P   ---
%+D   if TRCSW > 2
%+D   then BegTrace("MAXLOC: Result = "); EdInt(TrcBuf,loc); OutTrace;
%+D        if TRCSW > 3 then EdFile(TrcBuf,key) endif;
%+D   endif;
end;

Visible Routine CHKPNT;
import range(1:255) key; export Boolean res;
begin ref(FileBufr) buf;
%+D   if TRCSW > 1
%+D   then BegTrace("CHKPNT("); EdWrd(TrcBuf,key);
%+D        EdChar(TrcBuf,')'); OutTrace;
%+D   endif;
      res:=true;
      buf:=Name2Ref(FTAB(key).buf);
      if buf <> none then TRMBUF(key-1,buf) endif;
      if status<>0 then res:=false; status:=0 endif;
%+D   if TRCSW > 2
%+D   then BegTrace("CHKPNT: Result = "); EdBool(TrcBuf,res); OutTrace;
%+D        if TRCSW > 3 then EdFile(TrcBuf,key) endif;
%+D   endif;
end;

end;
