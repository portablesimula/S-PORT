begin
%     -----------------------------------------------------------------
%     ---  COPYRIGHT 1988 by                                        ---
%     ---  Simula a.s.                                              ---
%     ---  Oslo, Norway                                             ---
%     ---                                                           ---
%     ---                                                           ---
%     ---           P O R T A B L E     S I M U L A                 ---
%     ---                                                           ---
%     ---                F O R    I B M    P C                      ---
%     ---                                                           ---
%     ---                                                           ---
%     ---           U T I L I T Y   P R O G R A M S                 ---
%     ---                                                           ---
%     ---                   O B J D U M P                           ---
%     ---                                                           ---
%     -----------------------------------------------------------------
      integer Magic,nScns,TimDat,SymPtr,nSyms,OptHdr,Flags;

      Boolean Listing;                  ! Output Listing Indicator ;
      Ref(DirectByteFile) Inpt;             ! OBJ-Input File ;
      Ref(OutFile) Oupt;                ! Created Output File ;

      Ref(StringTable) STAB;

% ??  Ref(SEGDEF) array Seg(1:100);     ! Global Segment Table ;
% ??  Integer nseg;                     ! Table length ;

% ??  Ref(EXTERN) array Ext(1:100);     ! Global External Table ;
% ??  Integer next;                     ! Table length ;

      Integer CurSeg;                   ! Current Segment Index ;
      Integer CurOfst;                  ! Current Segment Offset ;

      Integer Sequ;                     ! Input byte number ;
      Integer Lng;                      ! Length of current record ;
      Integer ChkSum;                   ! Check-sum of current record ;
      Integer Start;                    ! Start byte number ;
      Integer Count;                    ! Count byte number ;
      Integer Code;                     ! Current Record Code ;

%page
      Text Procedure Prompt(ms,meny); value ms,meny; text ms,meny;
      begin text R; L: OutText(Cat(ms,": ")); BreakOutImage; inimage;
            R:-SysIn.image.strip; R.SetPos(R.length);
            if if R==notext then true else R.GetChar='?' then
            begin OutText("Input Format: "); OutText(meny);
                  OutImage; goto L;
            end;  Prompt:-copy(R); SysIn.SetPos(SysIn.length+1);
            OutText(R); OutImage;
      end *** Prompt ***;

      Procedure InputFile;
      begin text F; S: F:-Prompt("Input File","Standard File Format");
            Inpt:-new DirectByteFile(F);
            if not Inpt.Open then
            begin OutImage; OutText("The File """); OutText(F);
                  OutText(""" does not exist or is not accessible");
                  OutImage; OutImage; goto S;
            end;
      end;

      Procedure OutputFile;
      begin text F; S: F:-Prompt("Output File","Standard File Format");
            if F="TERM" then Oupt:-SysOut else
            if F="term" then Oupt:-SysOut else
            if F=notext then Oupt:-SysOut else
            begin Oupt:-new OutFile(F);
                  if not Oupt.Open(Blanks(100)) then
                  begin OutImage; OutText("The File """); OutText(F);
                        OutText(""" does not exist or is not accessible");
                        OutImage; OutImage; goto S;
                  end;
            end;
      end;

      Procedure ERROR(msg); value msg; text msg;
      begin OutImage; OutText("Byte"); OutInt(Sequ,6);
            OutText(":  ***ERROR***   "); OutText(msg); OutImage;
      end;

      Text Procedure Cat(t1,t2); value t1,t2; text t1,t2;
      begin text t; Cat:-t:-Blanks(t1.length+t2.length);
            t:=t1; t.Sub(t1.length+1,t2.length):=t2;
      end *** Cat ***;

%page

      Integer Procedure InByte;
      begin integer n; InByte:=n:=Inpt.InByte;
            Lng:=Lng-1; Sequ:=Sequ+1;
            ChkSum:=mod(ChkSum+n,256);
      end;

      Procedure PrtHex(i,n); integer i,n;
      begin text t; integer h; t:-Blanks(n);
            while n > 0 do
            begin h:=mod(i,16)+48; i:=i//16; if h > 57 then h:=h+7;
                  t.SetPos(n); t.PutChar(Char(h)); n:=n-1;
            end;  Oupt.OutText(t);
      end;

      Procedure PrtInt(n); integer n;
      begin if n<10           then Oupt.OutInt(n,1)
       else if n<100          then Oupt.OutInt(n,2)
       else if n<1000         then Oupt.OutInt(n,3)
       else if n<10000        then Oupt.OutInt(n,4)
       else if n<100000       then Oupt.OutInt(n,5)
       else if n<1000000      then Oupt.OutInt(n,6)
       else                        Oupt.OutInt(n,12)
      end;

      Procedure PrtNam(n); integer n;
      begin if n>0 and n<=STAB.nIndx then Oupt.OutText(STAB.Ident(n))
            else Oupt.OutText("????");
      end;

      Procedure PrtSeg(n); integer n;
      begin Oupt.OutText("Seg"); PrtInt(n); Oupt.OutChar(':');
% ??        if n>0 and n<=nseg then PrtNam(Seg(n).SegmentNameIndex)
% ??        else Oupt.OutText("????");
      end;

      Procedure PrtExt(n); integer n;
      begin Oupt.OutText("Ext"); PrtInt(n); Oupt.OutChar(':');
% ??        if n>0 and n<=next then Oupt.OutText(Ext(n).ExternalName)
% ??        else Oupt.OutText("????");
      end;

      Procedure PrtIdent(Code,Val); integer Code,Val;
      begin if Code=0 then PrtSeg(Val)
       else if Code=2 then PrtExt(Val)
       else if Code=3 then begin Oupt.OutText("Abs:"); PrtInt(Val) end
       else begin Oupt.OutText("????:"); PrtInt(Code);
                  Oupt.OutChar(':'); PrtInt(Val);
            end;
      end;

%page

      Integer Procedure ScanByte(id); text id;
      begin integer n; n:=InByte;
            Oupt.OutChar(' '); Oupt.OutText(id); Oupt.OutChar(':');
            PrtHex(n,2); Oupt.OutText("H  "); PrtInt(n); ScanByte:=n;
      end;

      Procedure ScanBytes(id,n); text id; integer n;
      begin Oupt.OutImage; Oupt.SetPos(19); Oupt.OutText(id);
            for n:=n-1 while n >= 0 do
            begin if Oupt.Pos > 63 then
                  begin Oupt.OutImage; Oupt.SetPos(24) end;
                  Oupt.OutChar(' '); PrtHex(InByte,2);
            end;
      end;

      Text Procedure ScanName(id,n); text id; integer n;
      begin text t; character c;
            Oupt.OutChar(' '); Oupt.OutText(id); Oupt.OutChar(':');
            ScanName:-t:-blanks(n);
            for n:=n-1 while n>=0 do
            begin c:=Char(InByte); PrtHex(Rank(c),2);
                  if Rank(c)<>0 then t.PutChar(c);
            end;
            Oupt.OutText("H  "); Oupt.OutText(t);
      end;

      Integer Procedure ScanWord(id); text id;
      begin integer n; n:=InByte; n:=InByte*256+n;
            Oupt.OutChar(' '); Oupt.OutText(id); Oupt.OutChar(':');
            PrtHex(n,4); Oupt.OutText("H  "); PrtInt(n); ScanWord:=n;
      end;

      Integer Procedure ScanDWord(id); text id;
      begin integer n; n:=InByte; n:=InByte*256+n;
            n:=InByte*65536+n; n:=InByte*1677216+n;
            Oupt.OutChar(' '); Oupt.OutText(id); Oupt.OutChar(':');
            PrtHex(n,8); Oupt.OutText("H  "); PrtInt(n); ScanDWord:=n;
      end;

      Procedure ScanChk;
      begin if Lng > 1 then ScanBytes("Tail:",Lng-1); InByte;
            if ChkSum <> 0 then ERROR("Check-Sum Error");
            ChkSum:=0;
      end;
%title ***    S  E  C  T  I  O  N  S    ***
Class SectionHeader;
begin integer FilPos,NxtPos; text SectName;
      integer pAddr,vAddr,Size,ScnPtr,RelPtr,LnoPtr,nReloc,nLno,Flags;

      Procedure ScanText;
      begin
            Inpt.Locate(1+ScnPtr);
            Oupt.OutImage; PrtHex(ScnPtr,8);
            Oupt.OutText("H:  ****** SECTION TEXT   ******");
            Oupt.OutImage; Oupt.OutImage;
            ScanBytes("Text",Size);
      end;

      Procedure ScanRelocations;
      begin
            Inpt.Locate(1+RelPtr);
            Oupt.OutImage; PrtHex(RelPtr,8);
            Oupt.OutText("H:  ****** SECTION RELOCATIONS ******");
            Oupt.OutImage; Oupt.OutImage;
            ScanBytes("Relo",nReloc);
      end;

      Procedure ScanLineNumbers;
      begin
            Inpt.Locate(1+LnoPtr);
            Oupt.OutImage; PrtHex(LnoPtr,8);
            Oupt.OutText("H:  ****** SECTION LINE NUMBERS ******");
            Oupt.OutImage; Oupt.OutImage;
            ScanBytes("Line",nLno);
      end;

      FilPos:=Sequ; Oupt.OutImage; PrtHex(FilPos,8);
      Oupt.OutText("H:  ****** SECTION HEADER ******");
      Oupt.OutImage; Oupt.OutImage;
      SectName:- ScanName("Section Name                 ",8); Oupt.OutImage;
      pAddr  := ScanDWord("pAddr                        "); Oupt.OutImage;
      vAddr  := ScanDWord("vAddr                        "); Oupt.OutImage;
      Size   := ScanDWord("Size                         "); Oupt.OutImage;
      ScnPtr := ScanDWord("File pointer to Section Text "); Oupt.OutImage;
      RelPtr := ScanDWord("File pointer to Relocations  "); Oupt.OutImage;
      LnoPtr := ScanDWord("File pointer to Line Numbers "); Oupt.OutImage;
      nReloc := ScanWord ("no.of Relocations            "); Oupt.OutImage;
      nLno   := ScanWord ("no.of Line Numbers           "); Oupt.OutImage;
      Flags  := ScanDWord("Flags                        "); Oupt.OutImage;
      NxtPos:=Sequ;
      if ScnPtr <> 0 then ScanText;
      if RelPtr <> 0 then ScanRelocations;
      if LnoPtr <> 0 then ScanLineNumbers;
      Inpt.Locate(1+NxtPos); Sequ:=NxtPos;
end;
%title ***    S T R I N G    T A B L E    ***

Class StringTable(nIndx); integer nIndx;
begin text array Ident(0:nIndx); end;

Procedure ReadStringTable(SymPtr,nSyms);
integer SymPtr;  ! File pointer to Symbol Table ;
integer nSyms;   ! no.of Symbol Table entries   ;
begin integer OldPtr,StrPtr,TabSize,x,b,CurIndx; text t;
      OldPtr:=Inpt.Location-1; StrPtr:=SymPtr+(nSyms*18);
      Oupt.OutImage; PrtHex(StrPtr,8);
      Oupt.OutText("H:  ****** STRING TABLE ******");
      Oupt.OutImage; Oupt.OutImage; Inpt.Locate(1+StrPtr);

      TabSize:=ScanDWord("Size of String Table       "); Oupt.OutImage;
      STAB:-new StringTable(TabSize);

      for x:=4 step 1 until TabSize-2 do
      begin CurIndx:=x; t:-Blanks(120);
            Oupt.OutInt(CurIndx,12); Oupt.OutChar(':');
            for b:=inbyte while b <> 0 do
            begin x:=x+1; PrtHex(b,2); t.PutChar(Char(b)) end;
            Oupt.OutText("H  "); Oupt.OutText(t.strip); Oupt.OutImage;
            STAB.Ident(CurIndx):-Copy(t.strip);
      end;
      Inpt.Locate(1+OldPtr);
end;
%title ***    S Y M B O L    T A B L E    ***
Class SymbolEntry;
begin text ident; integer sVal,Sectn,Type,Cls,nAux; ref(AuxEntry) Aux;

      integer procedure GetTyp; GetTyp:=mod(Type,16);
      integer procedure GetD1;  GetD1 :=mod(Type//16,4);
      
      Text Procedure ScanIdent(id); text id;
      begin text t; integer b,x,n;
            Oupt.OutChar(' '); Oupt.OutText(id); Oupt.OutChar(':');

            b:=InByte; PrtHex(b,2);
            if b <> 0 then
            begin ident:-t:-blanks(8); t.PutChar(Char(b)); n:=7;
                  for n:=n-1 while n>=0 do
                  begin b:=InByte; PrtHex(b,2);
                        if b <> 0 then t.PutChar(Char(b));
                  end;
                  Oupt.OutText("H  "); Oupt.OutText(t);
            end
       else begin PrtHex(InByte,2); PrtHex(InByte,2); PrtHex(InByte,2);
                  Oupt.OutText("H  "); Oupt.OutImage;
                  x:=ScanDWord("String Index");
                  if x > STAB.nIndx then t:-Copy("??????") else
                  t:-STAB.Ident(x); Oupt.OutText(t);
            end;
            ScanIdent:-t.strip;
      end;

      ident :- ScanIdent("Name or Index              "); Oupt.OutImage;
      sVal  := ScanDWord("Symbol Value               "); Oupt.OutImage;
      Sectn := ScanWord( "Section Number             "); Oupt.OutImage;
      Type  := ScanWord( "Type Specification         "); Oupt.OutImage;
      Cls   := ScanByte( "Storage Class of Symbol    "); Oupt.OutImage;
      nAux  := ScanByte( "Number of Auxiliary Entries"); Oupt.OutImage;
      if nAux <> 0 then ReadAuxEntry(this SymbolEntry,nAux-1);
end;

Class AuxEntry;
begin ref(AuxEntry) next; end;

AuxEntry Class AuxFileName;
begin text FileName; 
      FileName:- ScanName("Auxiliary File Name ",14); Oupt.OutImage;
      ScanDWord("Not Used                   "); Oupt.OutImage;
end;

AuxEntry Class AuxSection;
begin integer SLng,nRelo,nLno;
      SLng :=ScanDWord("Section Length             "); Oupt.OutImage;
      nRelo:=ScanWord( "Number of Relocations      "); Oupt.OutImage;
      nLno :=ScanWord( "Number of Line Numbers     "); Oupt.OutImage;
      ScanDWord("Not Used                   "); Oupt.OutImage;
      ScanDWord("Not Used                   "); Oupt.OutImage;
      ScanWord( "Not Used                   "); Oupt.OutImage;
end;

AuxEntry Class AuxFunction;
begin integer tagx,fsize,LnoPtr,endndx,tvndx;
      tagx  :=ScanDWord("Tag Index                  "); Oupt.OutImage;
      fsize :=ScanDWord("Byte-Size of Function      "); Oupt.OutImage;
      LnoPtr:=ScanDWord("File Pointer to Line no.s  "); Oupt.OutImage;
      endndx:=ScanDWord("Index of next Entry        "); Oupt.OutImage;
      tvndx :=ScanWord( "Not Used                   "); Oupt.OutImage;
end;

Procedure ReadAuxEntry(Smb,nRep); ref(SymbolEntry) Smb; integer nRep;
begin integer typ,d1; typ:=Smb.GetTyp; d1:=Smb.GetD1;
      Oupt.OutText("D1,Typ:"); Oupt.Outint(d1,4);
      Oupt.OutInt(typ,4); Oupt.OutImage;
      if (Smb.Cls=103) and (d1=0) and (typ=0)
      then ! *** C_FILE=67H=103 *** ;
      begin Smb.Aux:-new AuxFileName
      end
 else if (Smb.Cls=2) and (d1=2)
      then ! *** C_EXT=02H=2 *** ;
      begin Smb.Aux:-new AuxFunction
      end
 else if (Smb.Cls=3) and (d1=2)
      then ! *** C_STAT=03H=3 *** ;
      begin Smb.Aux:-new AuxFunction
      end
 else if (Smb.Cls=3) and (d1=0) and (typ=0)
      then ! *** C_STAT=03H=3 *** ;
      begin Smb.Aux:-new AuxSection
      end
 else ScanBytes("Auxiliary Entry         ",18);
      Oupt.OutImage; Oupt.OutImage;
      if nRep <> 0 then ReadAuxEntry(Smb,nRep-1);
end;

Class SymbolTable(SymPtr,nSyms);
integer SymPtr;  ! File pointer to Symbol Table ;
integer nSyms;   ! no.of Symbol Table entries   ;
begin ref(SymbolEntry) x; ref(SymbolEntry) array Elt(0:nSyms-1);
      Oupt.OutImage; PrtHex(SymPtr,8);
      Oupt.OutText("H:  ****** SYMBOL TABLE ******");
      Oupt.OutImage; Oupt.OutImage; Inpt.Locate(1+SymPtr);

      begin integer i;
            for i:=0 step 1 until nSyms-1 do
            begin Elt(i):-x:-New SymbolEntry; i:=i+x.nAux end;
      end;
end;
%title ***    M O N I T O R    ***

      OutText("SIMULA (R) COFF-File Analyzer   Version 1.00"); OutImage;
      OutText("Copyright (C) Simula a.s. 1988.  All rights reserved.");
      OutImage; OutImage; InputFile; OutputFile;
      Oupt.OutImage; PrtHex(Sequ,8);
      Oupt.OutText("H:  ******* FILE  HEADER *******");
      Oupt.OutImage; Oupt.OutImage;
      Magic  := ScanWord("Magic number                 "); Oupt.OutImage;
      nScns  := ScanWord("Number of Sections           "); Oupt.OutImage;
      TimDat := ScanDWord("Time and Date stamp          "); Oupt.OutImage;
      SymPtr := ScanDWord("File pointer to Symbol Table "); Oupt.OutImage;
      nSyms  := ScanDWord("no.of Symbol Table entries   "); Oupt.OutImage;
      OptHdr := ScanWord("Size of Optional Header      "); Oupt.OutImage;
      Flags  := ScanWord("Flags                        "); Oupt.OutImage;

      begin integer NxtPos; NxtPos:=Sequ;
            ReadStringTable(SymPtr,nSyms);
            New SymbolTable(SymPtr,nSyms);
            Inpt.Locate(1+NxtPos); Sequ:=NxtPos;
            while nScns > 0 do
            begin nScns:=nScns-1; New SectionHeader; end;
      end;

      if Oupt =/= SysOut then Oupt.Close;
      Inpt.Close;
      OutImage; OutImage;
      OutText("END  --  Input Bytes"); OutInt(Sequ-1,6);
      OutImage; OutImage;
end;
