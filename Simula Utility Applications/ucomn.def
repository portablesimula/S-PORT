Global
%-E    UCOMN("iAPX286");
%+E    UCOMN("iAPX386");
begin -----------------------------------------------------------------
      ---  COPYRIGHT 1989 by                                        ---
      ---  Simula a.s., Oslo, Norway                                ---
      ---                                                           ---
      ---              P O R T A B L E     S I M U L A              ---
      ---                                                           ---
      ---             F O R    i A P X    2 8 6 / 3 8 6             ---
      ---                                                           ---
      ---                                                           ---
      ---                 U  T  I  L  I  T  I  E  S                 ---
      ---                                                           ---
      ---  Selection Switches:                                      ---
      ---                                                           ---
      ---     C - Includes Consistency Tests                        ---
      ---     D - Includes Tracing Dumps                            ---
      ---     M - Generate Code for MS-DOS                          ---
      ---     O - Generate Code for MS-OS2                          ---
      ---     X - Generate Code for XENIX                           ---
      ---     E - Extended Mode I.e XENIX/386, UNIX/386             ---
      -----------------------------------------------------------------


%visible
    Define MxpSmb=64; -- I.e. Max 16384 symbols in symbol-table  

    Define MaxHash=255;     -- Max. no.of Hash keys - 1  -- DO NOT CHANGE IT !
    Define MaxByte=255;     -- Max. value in unsigend byte.
    Define MaxWord=65000;   -- Max. value in unsigend word (2 bytes).

    Define kSysIn=0,kSysOut=1,kSysTrace=2; -- System File Handlers
%-E Define AllignFac=2;
%+E Define AllignFac=4;

%+M --- File access codes: (MS-DOS)
%+M Define accread  =  0 --- Read Access
%+M Define accwrite =  1 --- Write Access
%+M Define accrw    =  2 --- Read and Write Access
%+M Define MaxAcc=2;

%+O --- File access codes: (MS-OS2)
%+O Define accread  = 32 --- Read Access and deny write
%+O Define accwrite = 17 --- Write Access and deny read/write
%+O Define accrw    = 18 --- Read and Write Access and deny read/write
%+O Define MaxAcc=    33;

%+X --- File access codes: (XENIX)
%+X Define accread  =   0 --- Read Access               (RDONLY)
%+X Define accwrite = 769 --- (Re)Write Access          (WRONLY+TRUNC+CREAT)
%+X Define accrw    = 770 --- (Re)Write and Read Access (RDWR+TRUNC+CREAT)
%+X Define MaxAcc=770;
%title ***   T Y P E    M A C R O E S   ***

Macro  byte: range(0:MaxByte) endmacro;
Macro  word: infix(WORDTYPE)  endmacro;
Macro dword: infix(DWORDTYPE) endmacro;
Macro qword: infix(QWORDTYPE) endmacro;

Macro unsigned:
%-E   range(0:MaxWord)
%+E   integer
endmacro;

Macro int:
%-E   short integer
%+E   integer
endmacro;

%title ***   B A S I C    R E C O R D S   ***
Record string; info "TYPE";
begin Name(Character) chradr; integer nchr end;

Profile Xhandlerp
import Byte code; infix(string) msg; label addr;
export label cont end;

Record EdBuff;
begin Byte nchr;        --- Number of Characters in buffer
      Byte pos;         --- Position indicator (0..131)
      Character chr(132);       --- Buffer area
end;

Record Symbol;
begin Word SMBLNK;  -- Next Symbol with same Hash-key
      Unsigned nchr;
      Character chr(0);
end;

Record Vector;            begin Unsigned MaxElt,nElt end; 
Record RefVector:Vector;  begin Ref()       Elt(0)   end;  
Record WrdVector:Vector;  begin Word Elt(0)   end;
Record RefBlock;          begin Ref()       Elt(256) end;
Record WrdBlock;          begin Word Elt(256) end;

Record WORDTYPE; info "TYPE";
begin variant range(0:MaxWord) val;
      variant Byte LO,HI;
      variant Range(0:MaxWord) AsWord;
      variant Byte             AsByte(2);
      variant Character        AsChar(2);
%-E   variant size             AsSize;
%-E   variant field()          AsAaddr;
end;

Record DWORDTYPE; info "TYPE";
begin variant integer          val;
      variant Byte             LO,LOHI,HILO,HI;
      variant Word             Ofst,Segm;
      variant Character        AsChar(4);
      variant integer          AsInt;
      variant short integer    AsSint(2);
      variant Word             AsWord(2);
      variant Byte             AsByte(4);
      variant Ref()            AsOaddr;
%+E   variant size             AsSize;
%+E   variant field()          AsAaddr;
end;

Record QWORDTYPE; info "TYPE";
begin variant long real        AsLreal;
      variant real             AsReal(2);
      variant Character        AsChar(8);
      variant integer          AsInt(2);
      variant short integer    AsSint(4);
      variant Dword            AsDword(2);
      variant Word             AsWord(4);
      variant Byte             AsByte(8);
end;

Record AnyType;
begin variant Character        AsChar(4);
      variant integer          AsInt;
      variant short integer    AsSint(2);
      variant Range(0:MaxWord) AsWord(2);
      variant Byte             AsByte(4);
      variant size             AsSize;
      variant ref()            AsOaddr;
      variant field()          AsAaddr;
end;

Record ASCIIZ;
begin Character chr(0) end;

%+M ------------- Program Segement Prefix under MS-DOS --- See Norton p.260-267
%+M Record PSP;
%+M begin Character F1(2);
%+M       Word MemSize;        -- Memory size in paragraphs
%+M       Character F3(40);
%+M       Word EnvStr;         -- Environment strings attr. pointer
%+M       Character F10(82);
%+M       Byte npar;           -- Parameter length in characters
%+M       Character par(127);  -- Parameters
%+M end;

%+X Record XNX;  --------- Initial Stack under XENIX
%+X begin Unsigned argc;      -- Argument count
%+X       Ref(RefArr) argv;   -- Pointer to array of pointers to args
%+X       Ref(RefArr) envp;   -- Pointer to array of pointers to envs
%+X end;
 
%+X Record RefArr;
%+X begin Ref(ASCIIZ) Elt(0) end;

%title ******    G L O B A L    D A T A    ******
    Range(0:MaxWord) OsStat  system "OSSTAT";

%+M Ref(PSP) PSPREF system "PSPREF";  --- Ref to Program Segment Prefix
%+O Dword ENVSEG    system "ENVSEG";  --- Ref to Program id and params
%+X Ref(XNX) XNXREF system "XNXREF";  --- Ref to XENIX init stack

    Const infix(string) nostring   = record:string(nchr=0);
    Unsigned ErrCnt;        -- No.of Error Messages Given (so far)

    --------------- EDITING BUFFERS ---------------
%+D Ref(EdBuff) TrcBuf;             -- Tracing buffer
    Ref(EdBuff) EdtBuf;             -- Editing buffer
    Ref(EdBuff) ErrMsg;             -- Error Message buffer
%+D Infix(EdBuff) TrcBuffer;        -- Tracing buffer
    Infix(EdBuff) EdtBuffer;        -- Editing buffer
    Infix(EdBuff) ErrBuffer;        -- Editing buffer

    --------------- TRACING SWITCHES ---------------
%+D Byte TrcSw;                     -- Trace mode switch

    --------------- WORK AREA HANDLING ---------------
    Ref() PoolTop;                  -- Storage boundary pointer
    Ref() PoolNxt;                  -- Storage boundary pointer
    Ref() PoolBot;                  -- Storage boundary pointer

    --------------- BASIC FILE HANDLING ---------------
    Boolean EndFile;                -- Set true whenever EOF on any file

    --------------- SYMBOL TABLE ---------------
    Word          nSmb;            -- No.of Symbols     (Dictionary)
    Ref(RefBlock) SMBTAB(MxpSmb);  -- Symbol table      (Dictionary)
    Word          HashKey(256);    -- Hash Key table    (Dictionary)
%title ***   M O N I T O R    R E Q U E S T S   ***

--- XENIX:OPEN   ---   Open file for reading and/or writing

%+X Sysroutine("X?open") XNX_OPEN;
%+X import Unsigned mode;     -- Access mode
%+X        Unsigned oflag;    -- Access code
%+X        ref(ASCIIZ) path;  -- Pointer to ASCIIZ Pathname
%+X export Unsigned fildes;   -- File Descriptor
%+X end;

--- MS-DOS:Function 3DH=61: Open File Handle --------------- Page 1-145

%+M Sysroutine("M?OPEN") DOS_OPEN;
%+M import Byte acode;           -- Access code
%+M        Name(Character) path; -- Pointer to ASCIIZ Pathname
%+M export Unsigned handle       -- File Handle
%+M end;

--- MS-DOS:Function 3CH=60: Create File and Open File ------ Page 1-143

%+M Sysroutine("M?CREF") DOS_CREF;
%+M import Byte fattr;           -- File attributes
%+M        Name(Character) path; -- Pointer to ASCIIZ Pathname
%+M export Unsigned handle       -- File Handle
%+M end;

--- MS-OS2:DosOpen  --- Opens a File ----------------------- Page 184  

%+O Sysroutine("O?DOSOPEN") OS2_OPEN;
%+O import ref(ASCIIZ) Path;     -- Pointer to ASCIIZ Pathname
%+O        ref() Handle;         -- Pointer to new File's Handle
%+O        ref() Action;         -- Pointer to Action Taken
%+O        integer FileSize;     -- File Primary Allocation
%+O        Unsigned Attr;        -- File Attribute
%+O        Unsigned Oflag;       -- Open Function Type
%+O        Unsigned Omode;       -- Open Mode (Access mode etc.)
%+O        integer reserved;     -- Reserved: MUST BE ZERO
%+O end;

--- XENIX:CLOSE  ---   Closes a File Descriptor

%+X Sysroutine("X?close") XNX_CLOSE;
%+X import Unsigned fildes;   -- File Descriptor
%+X end;

--- MS-DOS:Function 3EH=62: Close File Handle -------------- Page 1-149

%+M Sysroutine("M?CLOSE") DOS_CLOSE; --- Close File Handle
%+M import Unsigned handle    -- File Handle
%+M end;

--- MS-OS2:DosClose  --- Close File Handle ----------------- Page 54  

%+O Sysroutine("O?DOSCLOSE") OS2_CLOSE;
%+O import Unsigned Handle;    -- File Handle
%+O end;

Macro READ(4); -- READ(handle,count,gaddr,result)
begin
%+M   %4 := DOS_READ(%1,%2,%3);
%+O   OS2_READ(%1,Name2Ref(%3),%2,Name2Ref(@ %4));
%+X   %4 := XNX_READ(%2,Name2Ref(%3),%1);
endmacro;

--- XENIX:READ   ---   Read from a File

%+X Sysroutine("X?read") XNX_READ;
%+X import Unsigned nbyte;     -- Buffer length
%+X        ref(ASCIIZ) buffer; -- Pointer to Buffer
%+X        Unsigned fildes;    -- File Descriptor
%+X export Unsigned count;     -- 0:EOF, else Bytes read
%+X end;

--- MS-DOS:Function 3FH=63: Read from File Handle ---------- Page 1-151

%+M Sysroutine("M?READ") DOS_READ;
%+M import Unsigned handle;        -- File Handle
%+M        Unsigned lng;           -- Buffer length
%+M        Name(Character) buffer; -- Pointer to Buffer
%+M export Unsigned count;         -- Bytes read
%+M end;

--- MS-OS2:DosRead  --- Read From File --------------------- Page 241  

%+O Sysroutine("O?DOSREAD") OS2_READ;
%+O import Unsigned Handle;    -- File Handle
%+O        ref(ASCIIZ) Buffer; -- Pointer to User Buffer
%+O        Unsigned nByte;     -- Buffer Length
%+O        ref() Count;        -- 0:EOF, else Bytes Read
%+O end;

Macro WRITE(4); -- WRITE(handle,count,gaddr,result)
begin
%+M   %4 := DOS_WRITE(%1,%2,%3);
%+O   OS2_WRITE(%1,Name2Ref(%3),%2,Name2Ref(@ %4));
%+X   %4 := XNX_WRITE(%2,Name2Ref(%3),%1);
endmacro;

--- XENIX:WRITE  ---   Writes to a File

%+X Sysroutine("X?write") XNX_WRITE;
%+X import Unsigned nbyte;     -- Buffer length
%+X        ref(ASCIIZ) buffer; -- Pointer to Buffer
%+X        Unsigned fildes;    -- File Descriptor
%+X export Unsigned count;     -- Bytes written
%+X end;

--- MS-DOS:Function 40H=64: Write into File Handle --------- Page 1-153

%+M Sysroutine("M?WRITE") DOS_WRITE;
%+M import Unsigned handle;   -- File Handle
%+M        Unsigned lng;      -- Buffer length
%+M        Name() buffer;     -- Pointer to Buffer
%+M export Unsigned count;    -- Bytes written
%+M end;

--- MS-OS2:DosWrite  --- Write to File Synchronously ------- Page 332  

%+O Sysroutine("O?DOSWRITE") OS2_WRITE;
%+O import Unsigned Handle;    -- File Handle
%+O        ref(ASCIIZ) Buffer;         -- Pointer to User Buffer
%+O        Unsigned nByte;     -- Buffer Length
%+O        ref() Count;                -- Bytes Written
%+O end;

Macro LOCATE(4); -- LOCATE(handle,method,offset,result)
begin
%+M   %4:=DOS_FPTR(%1,%2,%3);
%+O   OS2_FPTR(%1,%3,%2,Name2Ref(@ %4));
%+X   %4:=XNX_LSEEK(%2,%3,%1);
endmacro;

--- XENIX:LSEEK  ---   Moves File Pointer

%+X Sysroutine("X?lseek") XNX_LSEEK;
%+X import Unsigned method;    -- 0:L=O, 1:L=P+O, 2:L=Size+O
%+X        integer Ofst;       -- Offset (O) Note: 4-byte int
%+X        Unsigned fildes;    -- File Descriptor
%+X export integer location;   -- New Loc (L) Note: 4-byte int
%+X end;

--- MS-DOS:Function 42H=66: Move File Pointer -------------- Page 1-157

%+M Sysroutine("M?FPTR") DOS_FPTR;
%+M import Unsigned handle;    -- File Handle
%+M        byte method;        -- 0:L=O, 1:L=P+O, 2:L=Size+O
%+M        integer offset;     -- Offset (O) Note: 4-byte int
%+M export integer location;   -- New Loc (L) Note: 4-byte int
%+M end;

--- MS-OS2:DosChgFilePtr  --- Change Read/Write Pointer ---- Page 51  

%+O Sysroutine("O?DOSCHGFILEPTR") OS2_FPTR;
%+O import Unsigned Handle;    -- File Handle
%+O        integer Ofst;       -- Offset (O) Note: 4-Byte int
%+O        Unsigned Method;    -- 0:L=O, 1:L=P+O, 2:L=Size+O
%+O        ref() Location;     -- New Pointer Location (L)
%+O end;

--- XENIX:SBRK   ---   Changes Data Segment Space Allocation

%+X Sysroutine("X?sbrk") XNX_SBRK;
%+X import int incr;     -- increment (decrement) in bytes
%+X export ref() area;   -- address of new area
%+X end;

--- MS-DOS:Function 48H=72: Allocate Memory ---------------- Page 1-183

%+M Sysroutine("M?ALOC") DOS_ALOC;
%+M import Unsigned requ;     -- Paragraphs of memory requested
%+M export infix(WRKPAK) res; -- Start of allocated area etc.
%+M end;

%+M Record WRKPAK; info "TYPE";
%+M begin ref() area;    -- AX:00: Start of allocated area
%+M       Unsigned maxs; -- BX: Max memory-blck avail if err
%+M end;

--- MS-OS2:DosAllocSeg  --- Allocate Segment --------------- Page 41  

%+O Sysroutine("O?DOSALLOCSEG") OS2_ALOC;
%+O import Unsigned Request;   -- No.of.bytes Requested
%+O        ref() Selector;     -- Selector Allocated (returned)
%+O        Unsigned Flags;     -- Allocation Flags
%+O end;

--- XENIX:EXIT   ---   Terminates a Process

%+X Sysroutine("X?exit") XNX_EXIT;
%+X import int stat;     -- status
%+X end;

--- MS-DOS:Function 4CH=76: End Process -------------------- Page 1-196

%+M Sysroutine("M?TERM") DOS_TERM;
%+M import byte RetCode; -- Return Code
%+M end;

--- MS-OS2:DosExit  --- Exit Program ----------------------- Page 89

%+O Sysroutine("O?DOSEXIT") OS2_EXIT;
%+O import Unsigned ActCode;   -- Action Code
%+O        Unsigned ResCode;   -- Result Code (for DosCWait)
%+O end;

%title ***  B a s i c    U t i l i e s  ***
Visible Sysroutine("S?BOBY") BOOL2BYTE;
import Boolean b; export Byte v;
end;

Visible Sysroutine("S?BYBO") BYTE2BOOL;
import Byte v; export Boolean b;
end;

Visible Sysroutine("S?SZ2W") Size2Int;
import size s; export Unsigned w;
end;

Visible Sysroutine("S?W2SZ") Int2Size;
import Unsigned w; export size s;
end;

Visible Sysroutine("S?RF2N") Ref2Name;
import ref() rf; export name() n;
end;

Visible Sysroutine("S?N2RF") Name2Ref;
import name() n; export ref() rf;
end;

Visible Sysroutine("S?BNOT") bNOT;
import byte i; export byte res  end;

Visible Sysroutine("S?WNOT") wNOT;
import range(0:16000) i; export range(0:16000) res  end;

Visible Sysroutine("S?DNOT") dNOT;
import integer i; export integer res  end;

Visible Sysroutine("S?BAND") bAND;
import byte i,j; export byte res  end;

Visible Sysroutine("S?WAND") wAND;
import range(0:16000) i,j; export range(0:16000) res  end;

Visible Sysroutine("S?DAND") dAND;
import integer i,j; export integer res  end;

Visible Sysroutine("S?BOR") bOR;
import byte i,j; export byte res  end;

Visible Sysroutine("S?WOR") wOR;
import range(0:16000) i,j; export range(0:16000) res  end;

Visible Sysroutine("S?DOR") dOR;
import integer i,j; export integer res  end;

Visible Sysroutine("S?BXOR") bXOR;
import byte i,j; export byte res  end;

Visible Sysroutine("S?WXOR") wXOR;
import range(0:16000) i,j; export range(0:16000) res  end;

Visible Sysroutine("S?DXOR") dXOR;
import integer i,j; export integer res  end;

Visible Sysroutine("S?BSHL") bSHL;
import byte i,j; export byte res  end;

Visible Sysroutine("S?WSHL") wSHL;
import range(0:16000) i,j; export range(0:16000) res  end;

Visible Sysroutine("S?BSHR") bSHR;
import byte i,j; export byte res  end;

Visible Sysroutine("S?WSHR") wSHR;
import range(0:16000) i,j; export range(0:16000) res  end;
%title ******    S T R I N G    H A N D L I N G    ******

Sysroutine("S?SCMPEQ") APX_SCMPEQ; --- Byte String Compare Equal
import Unsigned lng;          -- Length
       Name(Character) str1;  -- Pointer to String 1
       Name(Character) str2;  -- Pointer to String 2
export Boolean res;           -- Result
end;

Sysroutine("S?SMOVEI") APX_SMOVEI; --- Byte String Move and Incr address
import Unsigned lng;          -- Length
       Name(Character) dst;   -- Pointer to Destination
       Name(Character) src;   -- Pointer to Source
end;

Sysroutine("S?SMOVED") APX_SMOVED; --- Byte String Move and Decr address
import Unsigned lng;          -- Length
       Name(Character) dst;   -- Pointer to Destination
       Name(Character) src;   -- Pointer to Source
end;

Sysroutine("S?SSKIP") APX_SSKIP; --- Byte String Skip and Incr address
import Character c;           -- The character
       Unsigned lng;          -- Length
       Name(Character) buff;  -- Pointer to Buffer
export Unsigned rst;          -- No. of chars left after skip
end;

Sysroutine("S?STRIP") APX_STRIP; --- Byte String Strip and Decr address
import Character c;           -- The character
       Unsigned lng;          -- Length
       Name(Character) buff;  -- Pointer to Buffer
export Unsigned rst;          -- No. of chars left after strip
end;

Sysroutine("S?SFINDI") APX_SFINDI; --- Byte String Find and Incr address
import Character c;           -- The character
       Unsigned lng;          -- Length
       Name(Character) buff;  -- Pointer to Buffer
export Unsigned rst;          -- No. of chars left after find
end;

Sysroutine("S?SFINDD") APX_SFINDD; --- Byte String Find and Decr address
import Character c;           -- The character
       Unsigned lng;          -- Length
       Name(Character) buff;  -- Pointer to Buffer
export Unsigned rst;          -- No. of chars left after find
end;

Sysroutine("S?SFILL") APX_SFILL; --- Byte String Fill and Incr address
import Character c;           -- The character
       Unsigned lng;          -- Length
       Name(Character) buff;  -- Pointer to Buffer
end;


end;
