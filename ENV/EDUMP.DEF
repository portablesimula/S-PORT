 Module EDUMP("iAPX286");
 begin insert ECOMN,EBASE;
       -----------------------------------------------------------------
       ---  COPYRIGHT 1991 by                                        ---
       ---  Simula a.s.                                              ---
       ---                                                           ---
       ---              P O R T A B L E     S I M U L A              ---
       ---                 F O R    i A P X    2 8 6                 ---
       ---        T  H  E     E  N  V  I  R  O  N  M  E  N  T        ---
       ---                                                           ---
       ---  Selection Switches:                                      ---
       ---                                                           ---
       ---     D - Includes tracing dumps                            ---
       ---     M - Includes MS-DOS                                   ---
       ---     O - Includes MS-OS2                                   ---
       ---     X - Includes XENIX                                    ---
       ---     E - Extended mode -- 32 Bit 386                       ---
       -----------------------------------------------------------------

Visible Routine PUTHEX;
import infix(String) item;
%-E    range(0:MaxWord) val;
%+E    integer          val;
begin
%-E   range(0:MaxWord) k,n;
%+E   integer          k,n;
      n:=item.nchr;
      repeat while n > 0
      do n:=n-1; k:=val rem 16; val:=val/16; if k > 9 then k:=k+7 endif;
         k:=k+(ISO_0); var(item.chradr)(n) := k qua character;
      endrepeat;
end;

Routine Put2Addr;
import infix(String) item;
%-E    range(0:MaxWord) val;
%+E    integer          val;
begin PUTHEX(item,val); if item.nchr > 4
      then APX_SFILL(' ',item.nchr-4,item.chradr) endif;  --- Space fill
end;

Routine Put4Addr;
import infix(String) item; infix(AnyAddr) val;
begin infix(string) S;
%-E   S.chradr:=name(var(item.chradr)(item.nchr-4)); S.nchr:=4;
%+E   S.chradr:=name(var(item.chradr)(item.nchr-8)); S.nchr:=8;
      PUTHEX(S,val.AsOfst);
%-E   var(item.chradr)(item.nchr-5) := ':';
%-E   S.chradr:=name(var(item.chradr)(item.nchr-9)); -- S.nchr=4;
%-E   PUTHEX(S,val.AsSegm);
%-E   item.nchr:=item.nchr-9;
%+E   item.nchr:=item.nchr-8;
      if item.nchr>0
      then APX_SFILL(' ',item.nchr,item.chradr) endif;  --- Space fill
end;

Visible Routine PTSIZE; import infix(String) item; size val;
%-E begin infix(Any2Byte) x; x.AsSize:=val; Put2Addr(item,x.AsWrd) end;
%+E begin infix(AnyAddr) x; x.AsSize:=val; Put4Addr(item,x) end;

Visible Routine PTOADR; import infix(String) item; ref() val;
begin infix(AnyAddr) x; x.AsOaddr:=val; Put4Addr(item,x) end;

Visible Routine PTAADR; import infix(String) item; field() val;
%-E begin infix(Any2Byte) x; x.AsAaddr:=val; Put2Addr(item,x.AsWrd) end;
%+E begin infix(AnyAddr) x; x.AsAaddr:=val; Put4Addr(item,x) end;

Visible Routine PTPADR; import infix(String) item; label val;
begin infix(AnyAddr) x;
%-E   x.AsSegm:=0;
      x.AsPaddr:=val; Put4Addr(item,x)
end;

Visible Routine PTRADR; import infix(String) item; entry() val;
begin infix(AnyAddr) x;
%-E   x.AsSegm:=0;
      x.AsRaddr:=val; Put4Addr(item,x)
end;

Visible Routine EdSize; import ref(EdBuff) BF; size i;
begin infix(String) s; range(0:127) p,st;
      p:=BF.pos; st:=status;
%-E   if (p+4) >= BF.nchr then PrintOut(BF); p:=0 endif;
%-E   BF.pos:=p+4; s.chradr:=@BF.chr(p);
%-E   s.nchr:=4; PTSIZE(s,i); status:=st;
      if (p+8) >= BF.nchr then PrintOut(BF); p:=0 endif;
      BF.pos:=p+8; s.chradr:=@BF.chr(p);
      s.nchr:=8; PTSIZE(s,i); status:=st;
end;

Visible Routine EdRef; import ref(EdBuff) BF; ref() i;
begin infix(String) s; range(0:127) p,st;
      p:=BF.pos; st:=status;
%-E   if (p+9) >= BF.nchr then PrintOut(BF); p:=0 endif;
%-E   BF.pos:=p+9; s.chradr:=@BF.chr(p);
%-E   s.nchr:=9; PTOADR(s,i); status:=st;
%+E   if (p+8) >= BF.nchr then PrintOut(BF); p:=0 endif;
%+E   BF.pos:=p+8; s.chradr:=@BF.chr(p);
%+E   s.nchr:=8; PTOADR(s,i); status:=st;
end;

%+D Visible Routine EdFile;
%+D import ref(EdBuff) BF; range(1:MaxFile) key;
%+D begin range(0:MaxWord) h; ref(FileBufr) buf; integer curlc,lstlc;
%+D       h:=key-1;
%+D       buf:=Name2Ref(FTAB(key).buf)
%+D       if key > nsysfile
%+D       then
%+DM           curlc:=DOS_FPTR(h,1,0);                OsStat:=0;
%+DO           OS2_FPTR(h,0,1,name2ref(@curlc));      OsStat:=0;
%+DX           curlc:=XNX_LSEEK(1,0,h);               OsStat:=0;
%+DM           lstlc:=DOS_FPTR(h,2,0);                OsStat:=0;
%+DO           OS2_FPTR(h,0,2,name2ref(@lstlc));      OsStat:=0;
%+DX           lstlc:=XNX_LSEEK(2,0,h);               OsStat:=0;
%+DM           curlc:=DOS_FPTR(h,0,curlc);            OsStat:=0;
%+DO           OS2_FPTR(h,curlc,0,name2ref(@curlc));  OsStat:=0;
%+DX           curlc:=XNX_LSEEK(0,curlc,h);           OsStat:=0;
%+D       else curlc:=0; lstlc:=0 endif;
%+D       Ed(BF,"  FNAM=");   EdFileName(BF,key);       PrintOut(BF);
%+D       Ed(BF,"  key=");    EdWrd(BF,key);
%+D       Ed(BF,", type=");   EdWrd(BF,FTAB(key).type);
%+D       Ed(BF,", fac=");    EdWrd(BF,FTAB(key).fac);
%+D       Ed(BF,", DifLoc="); EdInt(BF,FTAB(key).DifLoc);
%+D       Ed(BF,", Amode=");  EdWrd(BF,FTAB(key).Amode);
%+D       Ed(BF,"  FPTR=");   EdInt(BF,curlc);
%+D       EdChar(BF,',');     EdInt(BF,lstlc);
%+D       if buf = none then Ed(BF,", no buffer") 
%+D       else Ed(BF,", buf.FileLoc=");    EdInt(BF,buf.FileLoc);
%+D            Ed(BF,", buf.mode=");       EdWrd(BF,buf.mode);
%+D            Ed(BF,", buf.nxt=");        EdWrd(BF,buf.nxt);
%+D            Ed(BF,", buf.lim=");        EdWrd(BF,buf.lim);
%+D            Ed(BF,", buf.cnt=");        EdWrd(BF,buf.cnt);
%+D       endif; PrintOut(BF);
%+D end;

-- %+D Visible Routine EdDate; import ref(EdBuff) BF;
-- %+D begin infix(String) s; range(0:127) p,st,trc;
-- %+D       p:=BF.pos; st:=status; trc:=TRCSW; TRCSW:=0;
-- %+D       if (p+12) >= BF.nchr then PrintOut(BF); p:=0; endif;
-- %+D       s.chradr:=@BF.chr(p); s.nchr:=BF.nchr-p;
-- %+D       BF.pos:=p+DATTIM(s); status:=st; TRCSW:=trc;
-- %+D end;

%+D Visible Routine EdHex;
%+D import ref(EdBuff) BF;
%+D %-E    range(0:MaxWord) val; range(0:8) n;
%+DE       integer          val; range(0:8) n;
%+D begin infix(String) s; range(0:127) p,st;
%+D       p:=BF.pos; st:=status;
%+D       if (p+n)>=BF.nchr then PrintOut(BF); p:=0 endif; BF.pos:=p+n;
%+D       s.chradr:=@BF.chr(p); s.nchr:=n; PUTHEX(s,val); status:=st;
%+D end;

%+D Visible Routine EdHexReal;
%+D import ref(EdBuff) BF; real val;
%+D begin infix(Any4Byte) x; x.AsReal:=val;
%+D       EdHex(BF,x.AsWord(1),4); EdHex(BF,x.AsWord(0),4);
%+D end;

%+D Visible Routine EdHexLreal;
%+D import ref(EdBuff) BF; long real val;
%+D begin infix(Any8Byte) x; x.AsLreal:=val;
%+D       EdHex(BF,x.AsWord(3),4); EdHex(BF,x.AsWord(2),4);
%+D       EdHex(BF,x.AsWord(1),4); EdHex(BF,x.AsWord(0),4);
%+D end;

%+D Visible Routine EdBytes;
%+D import ref(EdBuff) BF; infix(String) s;
%+D begin range(0:MaxWord) b,i; i:=0;
%+D       repeat while i < s.nchr
%+D       do b:=var(s.chradr)(i) qua integer;
%+D          EDHEX(BF,b,2); i:=i+1;
%+D       endrepeat;
%+D end;

%+D Visible Routine EdBool; import ref(EdBuff) BF; Boolean b;
%+D begin if b then Ed(BF,"True") else Ed(BF,"False") endif end;
%page
%+D Visible Routine EdSave; import ref(EdBuff) BF;
%+D begin range(0:MaxWord) i;
%+D       i:= 0; Ed(BF,"  SavePnt="); EdRef(BF,SavePnt.rf);
%+D       EdChar(BF,'+'); EdSize(BF,SavePnt.ofst.AsSize);
%+D       Ed(BF,",  SaveIdx="); EdWrd(BF,SaveIdx); Ed(BF,",  SaveMap=");
%+D       if SaveMap = none then Ed(BF,"empty")
%+D       else repeat while i < SaveMap.n
%+D            do EdWrd(BF,SaveMap.rela(i)); i:=i+1; Ed(BF,"  ") endrepeat;
%+D       endif;
%+D end;

%+D Visible Routine EdModInf;
%+D import ref(EdBuff) BF; ref(ModuleInfo) m; range(0:MaxWord) n;
%+D begin infix(String) id; ref(SegmentInfo) s; ref(LinePkt) lpk;
%+D       label bas; range(0:MaxWord) i;
%+D       id.nchr:=m.nchr; id.chradr:=name(m.chr);
%+D       Ed(BF,"MODULE "); Ed(BF,id); PrintOut(BF);
%+D       s:=m.first; if s=none then goto E1 endif;
%+D       repeat bas:=s.base.AsPaddr while bas <> nowhere
%+D       do Ed(BF,"SEG: "); EdPadr(BF,bas);
%+D          EdChar(BF,'-'); EdWrd(BF,s.lim);
%+D          if n > 0
%+D          then PrintOut(BF); i:=0; if n > s.npkt then n:=s.npkt endif;
%+D               repeat while i < n
%+D               do Ed(BF,"Line "); EdWrd(BF,s.pkt(i).lno); EdChar(BF,'=');
%+D                  EdHex(BF,s.pkt(i).rela,11); PrintOut(BF); i:=i+1;
%+D               endrepeat;
%+D          endif;
%+D          s:=s+size(SegmentInfo:s.npkt);
%+D       endrepeat
%+D E1:end;

%+D Visible Routine FILDMP;
%+D begin range(0:MaxFile) i;
%+D       Ed(TrcBuf,"*** FILE-DUMP ***"); PrintOut(TrcBuf);
%+D       Ed(TrcBuf,"Handle");    i:=0;
%+D       repeat if FTAB(i+1).type > 0
%+D              then SetPos(TrcBuf,8); EdWrd(TrcBuf,i); Ed(TrcBuf,": ");
%+D                   EdFile(TrcBuf,i+1); PrintOut(TrcBuf);
%+D              endif; i:=i+1;
%+D       while i < MaxFile do endrepeat;
%+D end;


%+D %-E Visible Routine STKDMP; import range(0:MaxWord) cnt;
%+D %-E begin infix(AnyAddr) stk; ref(Any2Byte) w; range(0:MaxWord) rSP,rBP;
%+D %-E       stk.AsOaddr:=name2ref(name(cnt));
%+D %-E       stk.AsOfst:=stk.AsOfst-6; w:=stk.AsOaddr; rBP:=w.AsWrd;
%+D %-E       stk.AsOfst:=stk.AsOfst+8; rSP:=stk.AsOfst;
%+D %-E       Ed(TrcBuf,"*** STACK-DUMP *** InitSP: "); EdHex(TrcBuf,InitSp,4);
%+D %-E       Ed(TrcBuf,", SP: "); EdHex(TrcBuf,rSP,4);
%+D %-E       Ed(TrcBuf,", BP: "); EdHex(TrcBuf,rBP,4); PrintOut(TrcBuf);
%+D %-E       if cnt=0 then cnt:=((InitSP-rSP)/2)+1 endif;
%+D %-E       repeat while cnt > 0
%+D %-E       do w:=stk.AsOaddr;
%+D %-E          if stk.AsOfst=InitSP then Ed(TrcBuf,"InitSP:- "); cnt:=1;
%+D %-E          elsif stk.AsOfst=rSP then Ed(TrcBuf,"SS:SP :- ")
%+D %-E          elsif stk.AsOfst <> rBP then Ed(TrcBuf,"         ")
%+D %-E          else Ed(TrcBuf,"SS:BP :- "); rBP:=w.AsWrd endif;
%+D %-E          EdRef(TrcBuf,stk.AsOaddr);
%+D %-E          Ed(TrcBuf,"   "); EdHex(TrcBuf,w.AsByte(0),2);
%+D %-E          Ed(TrcBuf," ");   EdHex(TrcBuf,w.AsByte(1),2);
%+D %-E          Ed(TrcBuf,"   "); EdHex(TrcBuf,w.AsWrd,4);
%+D %-E          Ed(TrcBuf,"   "); EdInt(TrcBuf,w.AsWrd);
%+D %-E          stk.AsOfst:=stk.AsOfst+2; PrintOut(TrcBuf); cnt:=cnt-1;
%+D %-E       endrepeat;
%+D %-E end;

%+DE Visible Routine STKDMP; import range(0:MaxWord) cnt;
%+DE begin infix(AnyAddr) stk; ref(Any4Byte) w; integer rESP,rEBP;
%+DE       stk.AsOaddr:=name2ref(name(cnt));
%+DE       stk.AsOfst:=stk.AsOfst-8; w:=stk.AsOaddr; rEBP:=w.AsInt;
%+DE       stk.AsOfst:=stk.AsOfst+12; rESP:=stk.AsOfst;
%+DE       Ed(TrcBuf,"*** STACK-DUMP *** InitESP: "); EdHex(TrcBuf,InitSp,8);
%+DE       Ed(TrcBuf,", ESP: "); EdHex(TrcBuf,rESP,8);
%+DE       Ed(TrcBuf,", EBP: "); EdHex(TrcBuf,rEBP,8); PrintOut(TrcBuf);
%+DE       if cnt=0 then cnt:=((InitSP-rESP)/4)+1 endif;
%+DE       repeat while cnt > 0
%+DE       do w:=stk.AsOaddr;
%+DE          if stk.AsOfst=InitSP then Ed(TrcBuf,"InitSP:- "); cnt:=1;
%+DE          elsif stk.AsOfst=rESP then Ed(TrcBuf,"  ESP :- ")
%+DE          elsif stk.AsOfst <> rEBP then Ed(TrcBuf,"         ")
%+DE          else Ed(TrcBuf,"  EBP :- "); rEBP:=w.AsInt endif;
%+DE          EdRef(TrcBuf,stk.AsOaddr);
%+DE          Ed(TrcBuf,"   "); EdHex(TrcBuf,w.AsByte(0),2);
%+DE          Ed(TrcBuf," ");   EdHex(TrcBuf,w.AsByte(1),2);
%+DE          Ed(TrcBuf," ");   EdHex(TrcBuf,w.AsByte(2),2);
%+DE          Ed(TrcBuf," ");   EdHex(TrcBuf,w.AsByte(3),2);
%+DE          Ed(TrcBuf,"   "); EdHex(TrcBuf,w.AsInt,8);
%+DE          Ed(TrcBuf,"   "); EdInt(TrcBuf,w.AsInt);
%+DE          stk.AsOfst:=stk.AsOfst+4; PrintOut(TrcBuf); cnt:=cnt-1;
%+DE       endrepeat;
%+DE end;

%+D %-O Visible Routine DmpTpkt; import infix(termio) tpkt;
%+D %-O begin BegTrace("TERMIO="); EdHex(TrcBuf,tpkt.iflag,4);
%+D %-O       EdChar(TrcBuf,':'); EdHex(TrcBuf,tpkt.oflag,4);
%+D %-O       EdChar(TrcBuf,':'); EdHex(TrcBuf,tpkt.cflag,4);
%+D %-O       EdChar(TrcBuf,':'); EdHex(TrcBuf,tpkt.lflag,4);
%+D %-O       EdChar(TrcBuf,':'); EdHex(TrcBuf,tpkt.line qua integer,2);
%+D %-O       EdChar(TrcBuf,':'); EdHex(TrcBuf,tpkt.cc(0) qua integer,2);
%+D %-O       EdChar(TrcBuf,':'); EdHex(TrcBuf,tpkt.cc(1) qua integer,2);
%+D %-O       EdChar(TrcBuf,':'); EdHex(TrcBuf,tpkt.cc(2) qua integer,2);
%+D %-O       EdChar(TrcBuf,':'); EdHex(TrcBuf,tpkt.cc(3) qua integer,2);
%+D %-O       EdChar(TrcBuf,':'); EdHex(TrcBuf,tpkt.cc(4) qua integer,2);
%+D %-O       EdChar(TrcBuf,':'); EdHex(TrcBuf,tpkt.cc(5) qua integer,2);
%+D %-O       EdChar(TrcBuf,':'); EdHex(TrcBuf,tpkt.cc(6) qua integer,2);
%+D %-O       EdChar(TrcBuf,':'); EdHex(TrcBuf,tpkt.cc(7) qua integer,2);
%+D %-O       EdChar(TrcBuf,':'); EdHex(TrcBuf,tpkt.pad qua integer,2);
%+D %-O       OutTrace;
%+D %-O end;

%+D Visible Routine EdPadr; import ref(EdBuff) BF; label i;
%+D begin infix(String) s; range(0:127) p,st;
%+D       p:=BF.pos; st:=status;
%+D %-E   if (p+9) >= BF.nchr then PrintOut(BF); p:=0 endif;
%+D %-E   BF.pos:=p+9; s.chradr:=@BF.chr(p);
%+D %-E   s.nchr:=9; PTPADR(s,i); status:=st;
%+DE      if (p+8) >= BF.nchr then PrintOut(BF); p:=0 endif;
%+DE      BF.pos:=p+8; s.chradr:=@BF.chr(p);
%+DE      s.nchr:=8; PTPADR(s,i); status:=st;
%+D end;

%+D Visible Routine EdRadr; import ref(EdBuff) BF; entry() i;
%+D begin infix(String) s; range(0:127) p,st;
%+D       p:=BF.pos; st:=status;
%+D %-E   if (p+9) >= BF.nchr then PrintOut(BF); p:=0 endif;
%+D %-E   BF.pos:=p+9; s.chradr:=@BF.chr(p);
%+D %-E   s.nchr:=9; PTRADR(s,i); status:=st;
%+DE      if (p+8) >= BF.nchr then PrintOut(BF); p:=0 endif;
%+DE      BF.pos:=p+8; s.chradr:=@BF.chr(p);
%+DE      s.nchr:=8; PTRADR(s,i); status:=st;
%+D end;

%title ******   EDTRAP   ******

%+D Visible Routine EdTrap;
%+D import infix(String) id; range(0:M_max) MD; infix(TrapPkt) trap;
%+D begin BegTrace(id); OutTrace;
%+D       BegTrace("TRAP "); EdWrd(TrcBuf,trap.OsCode);
%+D       if trap.OsCode < 32
%+D       then case 0:32 (trap.OsCode)
%+D            --- See iAPX286 page 2-24, 9-1
%+D            --- See iAPX287 page 1-32, 3-5
%+DM           when  0:  Ed(TrcBuf," Division by Zero in86")
%+DM           when  1:  Ed(TrcBuf," Single Step Interrupt")
%+DM           when  3:  Ed(TrcBuf," Breakpoint Interrupt")
%+DM           when  4:  Ed(TrcBuf," Integer Overflow")
%+DM           when  5:  Ed(TrcBuf," BOUND Range")  -- See NORTON p ?? eller
%+DM           when  6:  Ed(TrcBuf," Invalid Opcode")
%+DM           when  7:  Ed(TrcBuf," Numeric Co-Processor Not Available")
%+DM           when  9:  Ed(TrcBuf," Segment Overrun in87")
%+DM           when 13:  Ed(TrcBuf," Segment Overrun in86")
%+DM           when 16:  Ed(TrcBuf," Numeric Co-Processor Error Report")
%+DM  ----     when ??:  Ed(TrcBuf," Invalid 87-Operation")
%+DM  ----     when ??:  Ed(TrcBuf," Numeric Divide by zero")
%+DM  ----     when ??:  Ed(TrcBuf," Denormalized Operand")
%+DM  ----     when ??:  Ed(TrcBuf," Numeric Underflow")
%+DM  ----     when ??:  Ed(TrcBuf," Numeric Overflow")
%+DM  ----     when ??:  Ed(TrcBuf," Inexact Result")

%+DO           when  0:  Ed(TrcBuf," Division by Zero in86")
%+DO           when  1:  Ed(TrcBuf," Single Step Interrupt")
%+DO           when  3:  Ed(TrcBuf," Breakpoint Interrupt")
%+DO           when  4:  Ed(TrcBuf," Integer Overflow")
%+DO           when  5:  Ed(TrcBuf," BOUND Range")  -- See NORTON p ?? eller
%+DO           when  6:  Ed(TrcBuf," Invalid Opcode")
%+DO           when  7:  Ed(TrcBuf," Numeric Co-Processor Not Available")
%+DO           when  9:  Ed(TrcBuf," Segment Overrun in87")
%+DO           when 13:  Ed(TrcBuf," Segment Overrun in86")
%+DO           when 16:  Ed(TrcBuf," Numeric Co-Processor Error Report")
%+DO  ----     when ??:  Ed(TrcBuf," Invalid 87-Operation")
%+DO  ----     when ??:  Ed(TrcBuf," Numeric Divide by zero")
%+DO  ----     when ??:  Ed(TrcBuf," Denormalized Operand")
%+DO  ----     when ??:  Ed(TrcBuf," Numeric Underflow")
%+DO  ----     when ??:  Ed(TrcBuf," Numeric Overflow")
%+DO  ----     when ??:  Ed(TrcBuf," Inexact Result")

%+DX           when  1:  Ed(TrcBuf," Hangup")
%+DX           when  2:  Ed(TrcBuf," Interrupt")
%+DX           when  3:  Ed(TrcBuf," Quit")
%+DX           when  4:  Ed(TrcBuf," Illegal Instruction")
%+DX           when  5:  Ed(TrcBuf," Trace Trap")
%+DX           when  6:  Ed(TrcBuf," I/O Trap")
%+DX           when  7:  Ed(TrcBuf," Emulator Trap Instruction")
%+DX           when  8:  Ed(TrcBuf," Floating-point Exception")
%+DX           when  9:  Ed(TrcBuf," Kill (can't be caught)")
%+DX           when 10:  Ed(TrcBuf," Bus Error")
%+DX           when 11:  Ed(TrcBuf," Segment Violation")
%+DX           when 12:  Ed(TrcBuf," Bad Argument to System Call")
%+D            otherwise Ed(TrcBuf," *** Unknown Trap ***") endcase;
%+D       endif;
%+D       OutTrace;
%+D       BegTrace("EXMODE = "); EdWrd(TrcBuf,MD);
%+D       Ed(TrcBuf,", SIMULA-CODE = "); EdWrd(TrcBuf,trap.SimCode);
%+DM      Ed(TrcBuf,", MS-DOS-CODE = "); EdWrd(TrcBuf,trap.OsCode);
%+DO      Ed(TrcBuf,", MS-OS2-CODE = "); EdWrd(TrcBuf,trap.OsCode);
%+DX      Ed(TrcBuf,", XENIX-CODE = "); EdWrd(TrcBuf,trap.OsCode);
%+D       OutTrace;
%+D       BegTrace("Trap Address: "); EdPadr(TrcBuf,trap.TADR.AsPaddr);
%+D %-E   Ed(TrcBuf,"  Flags: "); EdHex(TrcBuf,trap.FLAGS,4);
%+DE      Ed(TrcBuf,"  Flags: "); EdHex(TrcBuf,trap.FLAGS,8);
%+D       OutTrace;
%+D %-E   BegTrace("AX: "); EdHex(TrcBuf,trap.rAX,4);
%+D %-E   Ed(TrcBuf,"  BX: "); EdHex(TrcBuf,trap.rBX,4);
%+D %-E   Ed(TrcBuf,"  CX: "); EdHex(TrcBuf,trap.rCX,4);
%+D %-E   Ed(TrcBuf,"  DX: "); EdHex(TrcBuf,trap.rDX,4);
%+D %-E   Ed(TrcBuf,"  SI: "); EdHex(TrcBuf,trap.rSI,4);
%+D %-E   OutTrace;
%+D %-E   BegTrace("SP: "); EdHex(TrcBuf,trap.rSP,4);
%+DM %-E  Ed(TrcBuf,"  BP: "); EdHex(TrcBuf,trap.OldBP,4);
%+DO %-E  Ed(TrcBuf,"  BP: "); EdHex(TrcBuf,trap.OldBP,4);
%+DX %-E  Ed(TrcBuf,"  BP: "); EdHex(TrcBuf,trap.UserBP,4);
%+D %-E   Ed(TrcBuf,"  DS: "); EdHex(TrcBuf,trap.rDS,4);
%+D %-E   Ed(TrcBuf,"  ES: "); EdHex(TrcBuf,trap.rES,4);
%+D %-E   Ed(TrcBuf,"  DI: "); EdHex(TrcBuf,trap.rDI,4);
%+D %-E   OutTrace;

%+DE      BegTrace("EAX: "); EdHex(TrcBuf,trap.rEAX,8);
%+DE      Ed(TrcBuf,"  EBX: "); EdHex(TrcBuf,trap.rEBX,8);
%+DE      Ed(TrcBuf,"  ECX: "); EdHex(TrcBuf,trap.rECX,8);
%+DE      Ed(TrcBuf,"  EDX: "); EdHex(TrcBuf,trap.rEDX,8);
%+DE      OutTrace;
%+DE      BegTrace("ESP: "); EdHex(TrcBuf,trap.rESP,8);
%+DE      Ed(TrcBuf,"  EBP: "); EdHex(TrcBuf,trap.UserBP,8);
%+DE      Ed(TrcBuf,"  ESI: "); EdHex(TrcBuf,trap.rESI,8);
%+DE      Ed(TrcBuf,"  EDI: "); EdHex(TrcBuf,trap.rEDI,8);
%+DE      OutTrace;

--??%+D   BegTrace("At Line: "); EdLineId(TrcBuf,trap.TADR.AsPaddr);
--??%+D   OutTrace;
%+D end;

%+D Visible Routine EdCont; import label cont;
%+D begin BegTrace("Continuation Address: "); EdPadr(TrcBuf,cont); OutTrace;
%+D       if cont = nowhere then SYSPRI("No continuation defined")
--??%+D   else BegTrace("At Line: "); EdLineId(TrcBuf,cont); OutTrace;
%+D       endif;
%+D end;

%title ******    DMPOBJ    ******

Visible Routine DMPOBJ;  --- dmpobj;
import range(0:255) key; ref(Any2Byte) adr; size lng;
begin --- Dump the given number of object units
      --- The dump is given as 10 octal words per line.
      --- Each word is 11 digits followed by one space.
--??  ref() stop;            --- Next addr after last one dumped
--??  character image(120);  --- Editing buffer    --- M] TAS VEKK !!!!!!!
--??  integer column;        --- Column:  Loops from 0 to 9
--??  infix(String) S;       --- String descriptor of current field
--??  infix(String) line;    --- String descriptor of editing buffer

%+D   if TRCSW > 1
%+D   then BegTrace("DMPOBJ("); EdWrd(TrcBuf,key); EdChar(TrcBuf,',');
%+D        EdRef(TrcBuf,adr); EdChar(TrcBuf,','); EdSize(TrcBuf,lng);
%+D        EdChar(TrcBuf,')'); OutTrace;
%+D   endif;
-- %+D
-- %+D       ---    Initializations:
-- %+D       stop := adr + lng; S.nchr := 11;
-- %+D       line.chradr := @image; line.nchr := 120;
-- %+D
-- %+D       repeat while adr < stop       --- Outer loop: Run once per line
-- %+D       do APX_SFILL(' ',line.nchr,line.chradr); column := 0;
-- %+D          repeat S.chradr := @ image(column); --- Field for editing
-- %+D                 PUTHEX(S,adr.AsWrd); --- Edit one word in octal
-- %+D                 adr:= adr + size(Any2Byte)
-- %+D                 if adr >= stop then column := 120 endif
-- %+D                 column := column+12;
-- %+D          while column <= 120  do endrepeat;
-- %+D          if key=0 then key:=K_systrace endif; OUTIMA(key,line);
-- %+D       endrepeat;
end;
end;
