; ---------------------------------------------------------------
; ---  COPYRIGHT 1989 by                                      ---
; ---  Simula a.s.                                            ---
; ---  Oslo, Norway                                           ---
; ---                                                         ---
; ---             P O R T A B L E     S I M U L A             ---
; ---                                                         ---
; ---    M  A  C  R  O     D  E  F  I  N  I  T  I  O  N  S    ---
; ---------------------------------------------------------------
; ---------------------------------------------------------------
; ---  Simula a.s sept. 1992
; ---  Macro definitions etc. for Simula programs
; ---
; ---  Provided in source to allow local modifications to ENVIR
; ---  and DOSSEG (IF you know what you are doing!!!)
; ---------------------------------------------------------------
;
; use -DTARGET0 (DOS, no coproc.)
;     -DTARGET1 (DOS, x87 coproc.) etc.
;


STKHED   EQU   50      ; Defines SIMULA Stack Head Size in Bytes
STKLNG   EQU   1948    ; Defines SIMULA Stack Body Size in Bytes
TRUE     EQU   0FFFFH
FALSE    EQU   0

IFDEF TARGET0 ; MS-DOS WITHOUT NUMERIC COPROCESSOR
        .8086
TARGET   EQU   0
OSID     EQU   'MS-DOS (R)    '
iAPX286  EQU   TRUE
iAPX386  EQU   FALSE
WITH87   EQU   FALSE
WTL167   EQU   FALSE
DOS      EQU   TRUE
OS2      EQU   FALSE
XENIX    EQU   FALSE
UNIX     EQU   FALSE
ENDIF

IFDEF TARGET1 ; MS-DOS WITH 8087 OR HIGHER
        .8086
        .8087
TARGET   EQU   1
OSID     EQU   'MS-DOS (R)    '
iAPX286  EQU   TRUE
iAPX386  EQU   FALSE
WITH87   EQU   TRUE
WTL167   EQU   FALSE
DOS      EQU   TRUE
OS2      EQU   FALSE
XENIX    EQU   FALSE
UNIX     EQU   FALSE
ENDIF

IFDEF TARGET2 ; MS-OS2 WITH 80287 OR EMULATOR
        .286p
        .287
TARGET   EQU   2
OSID     EQU   'OS/2 (R)      '
iAPX286  EQU   TRUE
iAPX386  EQU   FALSE
WITH87   EQU   TRUE
WTL167   EQU   FALSE
DOS      EQU   FALSE
OS2      EQU   TRUE
XENIX    EQU   FALSE
UNIX     EQU   FALSE
ENDIF

IFDEF TARGET3 ; XENIX/286 WITH 80287 OR EMULATOR
        .286p
        .287
TARGET   EQU   3
OSID     EQU   'XENIX/286 (R) '
iAPX286  EQU   TRUE
iAPX386  EQU   FALSE
WITH87   EQU   TRUE
WTL167   EQU   FALSE
DOS      EQU   FALSE
OS2      EQU   FALSE
XENIX    EQU   TRUE
UNIX     EQU   FALSE
ENDIF

IFDEF TARGET4 ; XENIX/386 WITH 80287 OR EMULATOR
        .386
        .287
TARGET   EQU   4
OSID     EQU   'XENIX/386 (R) '
iAPX286  EQU   FALSE
iAPX386  EQU   TRUE
WITH87   EQU   TRUE
WTL167   EQU   FALSE
DOS      EQU   FALSE
OS2      EQU   FALSE
XENIX    EQU   TRUE
UNIX     EQU   FALSE
ENDIF

IFDEF TARGET5 ; XENIX/386 WITH WEITEK X167 OR EMULATOR
        .386
TARGET   EQU   5
OSID     EQU   'XENIX/386 (R) '
iAPX286  EQU   FALSE
iAPX386  EQU   TRUE
WITH87   EQU   FALSE
WTL167   EQU   TRUE
DOS      EQU   FALSE
OS2      EQU   FALSE
XENIX    EQU   TRUE
UNIX     EQU   FALSE
ENDIF

IFDEF TARGET6 ; UNIX/386 WITH 80287 OR EMULATOR
        .386
        .287
TARGET   EQU   6
OSID     EQU   'UNIX/386 (R)  '
iAPX286  EQU   FALSE
iAPX386  EQU   TRUE
WITH87   EQU   TRUE
WTL167   EQU   FALSE
DOS      EQU   FALSE
OS2      EQU   FALSE
XENIX    EQU   FALSE
UNIX     EQU   TRUE
ENDIF

IFDEF TARGET7 ; UNIX/386 WITH WEITEK X167 OR EMULATOR
        .386
TARGET   EQU   7
OSID     EQU   'UNIX/386 (R)  '
iAPX286  EQU   FALSE
iAPX386  EQU   TRUE
WITH87   EQU   FALSE
WTL167   EQU   TRUE
DOS      EQU   FALSE
OS2      EQU   FALSE
XENIX    EQU   FALSE
UNIX     EQU   TRUE
ENDIF


IF TARGET NE TARGET ; *** TEST FOR UNDEFINED TARGET ***
ENDIF

; ********************************************************
; ******   S E G M E N T    D E F I N I T I O N S   ******
; ********************************************************

IF iAPX286
S@ENV_TEXT SEGMENT WORD PUBLIC 'FAR_CODE' ; BYTE->WORD pje
S@ENV_TEXT ENDS
_TEXT      SEGMENT PARA PUBLIC 'CODE'
_TEXT      ENDS
_DATA      SEGMENT WORD PUBLIC 'DATA'
_DATA      ENDS
STACK      SEGMENT PARA STACK  'STACK'
STACK      ENDS
DGROUP     GROUP  STACK,_DATA
           ASSUME  SS:DGROUP
ELSE ; I.E. iAPX386
_TEXT      SEGMENT DWORD  PUBLIC  USE32 'CODE'
_TEXT      ENDS
_DATA      SEGMENT DWORD  PUBLIC  USE32 'DATA'
_DATA      ENDS
  IF WTL167
W167SEG    SEGMENT AT 0
W167START  LABEL   BYTE
W167       EQU     W167START[0FFC00000H]
W167SEG    ENDS
DGROUP     GROUP   _DATA,W167SEG
   ELSE
DGROUP     GROUP   _DATA
   ENDIF
           ASSUME  CS:_TEXT
           ASSUME  DS:DGROUP
           ASSUME  SS:DGROUP
           ASSUME  ES:DGROUP
ENDIF



; **********************************************
; ******   C O M M O N    M A C R O E S   ******
; **********************************************

IF iAPX286
AllignFac EQU 2
FSTARG    EQU [BP]+6
ELSE ; I.E. iAPX386
AllignFac EQU 4
FSTARG    EQU [EBP]+8
ENDIF


;; unallign macro - DO NOT CHANGE unless you really understand it!!!
SIMROUTINE MACRO  RRR
       LOCAL ALIG
IF iAPX286
;; in order to force alignment on FAR entry, the NEAR entry must be unaligned
;; It MUST be done as below since the SimLinker cannot handle ORG changes
ALIG:
IF1 ;; in pass 1, compute whether a NOP should be inserted
       ORG $+3
       EVEN
       ORG $-3
  IF   $-ALIG
       ORG $-1
       NOP ; word align FAR entry
  ENDIF
ELSE ;; in pass 2, use pass 1 value of RRR to determine whether NOP was inserted
  IF RRR-ALIG
       NOP
  ENDIF
ENDIF
RRR    PROC   FAR
       PUBLIC RRR
       ASSUME DS:NOTHING
       ASSUME ES:NOTHING
       POP    SI   ; Near Entry
       PUSH   CS
       PUSH   SI
       PUSH   BP   ; Far Entry
       MOV    BP,SP
ELSE ; I.E. iAPX386
       EVEN
RRR    PROC   NEAR
       PUBLIC RRR
       PUSH   EBP
       MOV    EBP,ESP
ENDIF
       ENDM
;; unallign macro end - DO NOT CHANGE unless you really understand it!!!


ROUTINE MACRO  RRR
       EVEN
IF iAPX286
RRR    PROC   FAR
       PUBLIC RRR
       ASSUME DS:NOTHING
       ASSUME ES:NOTHING
       PUSH   BP   ; Far Entry
       MOV    BP,SP
ELSE ; I.E. iAPX386
RRR    PROC   NEAR
       PUBLIC RRR
       PUSH   EBP
       MOV    EBP,ESP
ENDIF
       ENDM


SUBROUTINE MACRO  RRR
RRR    PROC   NEAR
IF iAPX286
       ASSUME DS:NOTHING
       ASSUME ES:NOTHING
       EVEN
       PUSH   BP   ; Near Entry
       MOV    BP,SP
ELSE ; I.E. iAPX386
       PUSH   EBP
       MOV    EBP,ESP
ENDIF
       ENDM


ENDROUTINE MACRO RRR,NNN
IF iAPX286
       MOV    SP,BP
       POP    BP
ELSE ; I.E. iAPX386
       MOV    ESP,EBP
       POP    EBP
ENDIF
       RET    NNN
RRR    ENDP
       ENDM


GLOBAL MACRO   var,def,val
IF iAPX286
var    LABEL   WORD
ELSE ; I.E. iAPX386
var    LABEL   DWORD
ENDIF
       PUBLIC  var
       def     val
       ENDM


IF iAPX286
NEG2   MACRO   R1,R2
       NEG     R2
       ADC     R1,0
       NEG     R1
       ENDM
ENDIF


ERROR  MACRO  NNN
IF iAPX286
       MOV    AL,NNN
       PUSH   AX
       CALL   FAR PTR K@ERROR+3
ELSE ; I.E. iAPX386
       PUSH   NNN
       CALL   K@ERROR
ENDIF
       ENDM




EXIT   MACRO CCC   


IF DOS
  IFDIF   <AL>,<CCC>
       MOV    AL,CCC
  ENDIF
  IFDEF VOPTV
       PUSH   SS
       POP    DS
       ASSUME DS:DGROUP
       PUSH   AX
       CALL   FAR PTR _exit
  ELSE
       MOV    AH,4CH
       INT    21H
  ENDIF
ENDIF
IF OS2
       PUSH   0   ; ActionCode (0:Current Thread,1:Whole Process)
       PUSH   CCC ; ExitCode
       CALL    FAR PTR DOSEXIT
ENDIF
IF iAPX286 AND XENIX
       PUSH   SS
       POP    DS
       ASSUME DS:DGROUP
ENDIF
IF XENIX OR UNIX
       PUSH   CCC
       CALL   _exit
ENDIF
       ENDM


PRT   MACRO   LNG,MSG
; *** NOTE: DS = SEGMENT(MSG) ***
IF DOS
         MOV    DX,MSG
         MOV    AH,9
         INT    21H
ENDIF
IF OS2
         PUSH   2                 ; 2=Error Device
         PUSH   DS                ; Segment of Message
         PUSH   MSG               ; Offset  of Message
         PUSH   LNG               ; Length of Message
         PUSH   SEG RetCode       ; Segment of Return value
         PUSH   OFFSET RetCode    ; Offset  of Return value
         CALL   FAR PTR DOSWRITE
ENDIF
IF XENIX OR UNIX
   IF iAPX286
         PUSH   LNG               ; Length of Message
         PUSH   DS                ; Segment of Message
         PUSH   MSG               ; Offset  of Message
         PUSH   2                 ; 2=Error Device
         CALL   FAR PTR _write
         ADD    SP,8
   ELSE ; I.E. iAPX386
         PUSH   LNG               ; Length of Message
         PUSH   MSG               ; Offset  of Message[
         PUSH   2                 ; 2=Error Device
         CALL   _write
         ADD    ESP,12
   ENDIF
ENDIF
       ENDM

IF DOS
GTRH   MACRO   CODE,TAB    ; ******  Get old Trap Handler  ******
       MOV     AH,35H
       MOV     AL,CODE
       INT     21H
       MOV     CS:WORD PTR TAB,BX
       MOV     CS:WORD PTR TAB+2,ES
       ENDM
ENDIF


IF DOS
ETRH   MACRO   CODE,RUT    ; ******  Enable DOS Trap Handler  ******
       MOV     DX,OFFSET RUT
       MOV     AH,25H
       MOV     AL,CODE
       INT     21H
       ENDM
ENDIF


IF OS2
ETRH   MACRO   CODE,RUT    ; ******  Enable OS/2 Trap Handler  ******
       PUSH    CODE             ; Interrupt no.
       PUSH    CS               ; Handler's segment
       PUSH    OFFSET RUT       ; Handler's offset
       PUSH    DS               ; PrvAddr's segment
       PUSH    OFFSET PRVADDR   ; PrvAddr's offset
       CALL    FAR PTR DOSSETVEC
       ENDM
ENDIF

IF XENIX OR UNIX
ESIG   MACRO   CODE        ; ******  Enable XENIX/UNIX Signal Handler  ******
   IF iAPX286
       PUSH    CS
       PUSH    OFFSET I@SIGF
       PUSH    CODE
       CALL    FAR PTR _signal
       ADD     SP,6
   ELSE ; I.E. iAPX386
       PUSH    OFFSET I@SIGF
       PUSH    CODE
       CALL    _signal
       ADD     ESP,8
   ENDIF
       ENDM
ENDIF


IF DOS
DTRH   MACRO   CODE,TAB    ; ******  Disable Trap Handler  ******
       MOV     AX,CS:WORD PTR TAB+2
       MOV     DS,AX
       MOV     DX,CS:WORD PTR TAB
       MOV     AH,25H
       MOV     AL,CODE
       INT     21H
       ENDM
ENDIF



; *******************************************************
; ******   I N T E L  8 0 x 8 7    M A C R O E S   ******
; *******************************************************

IF WITH87

FSWAX  MACRO  ; 87-Flags --> AX   ; Needed separately in sinus etc.
   IF iAPX286
       FSTSW  SS:G@TMP8687
       WAIT
       MOV    AX,SS:G@TMP8687
   ELSE ; I.E. iAPX386
       FSTSW  AX
   ENDIF
       ENDM

FSFLG  MACRO  ; 87-Flags --> CPU
       FSWAX
       SAHF
       ENDM

   IF iAPX286
FLDT   MACRO   ARG ; FLD   TBYTE PTR SS:ARG
       DB 036H     ; Segment Override SS:   --- P.G.A ERROR in MASM
       DB 0DBH,2EH ; FLD   TBYTE PTR        --- P.G.A ERROR in MASM
       DW ARG      ;                 ARG    --- P.G.A ERROR in MASM
       ENDM
   ELSE ; I.E. iAPX386
FLDT   MACRO   ARG ; FLD   TBYTE PTR ARG
       DB 0DBH,2dH ; P.G.A ERROR in MASM
       DD ARG      ; P.G.A ERROR in MASM
       ENDM
   ENDIF
ENDIF

; *******************************************************
; ******   W E I T E K  x 1 6 7    M A C R O E S   ******
; *******************************************************
IF WTL167

wdef	macro	prefix,suffix
prefix&suffix	struc
db __wftemp dup (?)
prefix&suffix	ends
endm

__wftemp = 4000H
rept  32
wdef  ws,%(__wftemp AND 1FH)
__wftemp = __wftemp+1
endm

__wftemp = 0C000H
rept  16
wdef  wd,%(__wftemp AND 1FH)
__wftemp = __wftemp+2
endm

wfspage	macro
__wftemp = 0
endm

wfdpage	macro
__wftemp = 8000H
endm

wfspage
page

; ***  Arithmetic operations (wftst & wftstt) with one argument  ***
wf1    macro   opcd,rega,reg1
IF      ((TYPE rega) AND 4000H) NE 0
wOp = ((TYPE rega) AND 8000H)+(opcd SHL 10)
wFx = (((TYPE rega) AND 1FH)/4 SHL 7)+((TYPE rega) MOD 4)
     MOV W167[wOp+wFx],AL
else
   ifb	<reg1>
        wf2     opcd,ws0,rega
   else
        wf2     opcd,wd0,rega
   endif
endif
endm


; ******  Arithmetic operations with two arguments  ******
wf2	macro	opcd,regb,rega ; regb := rega <opcd> regb
wOp = ((TYPE regb) AND 8000H)+(opcd SHL 10)
wTx = ((TYPE regb) AND 1FH) SHL 2
IF      ((TYPE rega) AND 4000H) NE 0
wFx = (((TYPE rega) AND 1FH)/4 SHL 7)+((TYPE rega) MOD 4)
     MOV W167[wOp+wTx+wFx],AL
else
     MOV DWORD PTR W167[wOp+wTx],rega
endif
endm



WFADD   macro   regb,rega ; ***  Add  ***
wf2     00H,regb,rega
__wftemp = (TYPE regb) AND 8000H
endm


WFMUL   macro   regb,rega ; ***  Multiply  ***
wf2     02H,regb,rega
__wftemp = (TYPE regb) AND 8000H
endm


WFSUBR  macro   regb,rega ; ***  Subtract in reverse order  ***
wf2     04H,regb,rega
endm


WFDIVR  macro   regb,rega ; ***  Divide in reverse order  ***
wf2     05H,regb,rega
endm


WFMULN  macro   regb,rega ; ***  Multiply & negate  ***
wf2     06H,regb,rega
endm


WFLOAT  macro   regb,rega ; ***  Fixed to float conversion  ***
wf2     07H,regb,rega
endm


WFCMPRT macro   regb,rega ; ***  Compare with trap  ***
wf2     08H,regb,rega
endm


WFTSTT  macro   rega,reg1 ; ***  Test with trap  ***
wf1     09H,rega,reg1
endm


WFNEG   macro   regb,rega ; ***  Negate  ***
wf2     0AH,regb,rega
endm


WFABS   macro   regb,rega ; ***  Absolute value  ***
wf2     0BH,regb,rega
endm


WFCMPR  macro   regb,rega ; ***  Compare  ***
wf2     0CH,regb,rega
endm


WFTST   macro   rega,reg1 ; ***  Test  ***
wf1     0DH,rega,reg1
endm


WFAMUL  macro   regb,rega ; ***  Absolute multiply  ***
wf2     0EH,regb,rega
endm


WFIX    macro   regb,rega,reg1 ; ***  Float to fixed conversion  ***
IF      ((TYPE rega) AND 4000H) NE 0
wOp =   (((TYPE rega) SHR 10) AND 20H)+0FH
wf2     wOp,regb,rega
else
ifb     <reg1>
wf2     0FH,regb,rega
else
wf2     2FH,regb,rega
endif
endif
endm


WFCVT	macro	regb,rega ; ***  Convert double to or from single  ***
ife	(TYPE regb) AND 8000H ;  Convert double to single.
wf2	10H,regb,rega
else                          ;  Convert single to double.
wOp = (11H SHL 10)
wTx = ((TYPE regb) AND 1FH) SHL 2
IF      ((TYPE rega) AND 4000H) NE 0
wFx = (((TYPE rega) AND 1FH)/4 SHL 7)+((TYPE rega) MOD 4)
     MOV W167[wOp+wTx+wFx],AL
else
     MOV DWORD PTR W167[wOp+wTx],rega
endif
endif
endm


WFMAC   macro   regb,rega ; ***  Multiply and accumulate in single precision ***
wf2   12H,regb,rega
endm


WFLDCTX	macro   ereg ; ***  ContextRegister := ereg  ***
MOV   DWORD PTR W167[(30H SHL 10)],ereg
endm


WFSTCTX	macro   ereg,opcd ; ***  Store context register  ***
ifb <opcd>
MOV    ereg,DWORD PTR W167[(31H SHL 10)] ; ereg := ContextRegister
else
opcd   ereg,DWORD PTR W167[(31H SHL 10)] ; ereg := ereg <opcd> ContextRegister
endif
endm


WFMACD  macro   regb,rega ; ***  Multiply and accumulate in double precision ***
wf2   32H,regb,rega
endm


WFLD   macro   regb,rega ; ***  Load register  ***
wOp = __wftemp+(01H SHL 10)
wTx = ((TYPE regb) AND 1FH) SHL 2
IF ((TYPE rega) AND 4000H) NE 0      ; (wtl)rega --> (wtl)regb
wFx = (((TYPE rega) AND 1FH)/4 SHL 7)+((TYPE rega) MOD 4)
     MOV W167[wOp+wTx+wFx],AL
   IF ((TYPE regb) AND 8000H) NE 0   ; (wtl)rega+1 --> (wtl)regb+1
wTx = ((TYPE regb+1) AND 1FH) SHL 2
wFx = (((TYPE rega+1) AND 1FH)/4 SHL 7)+((TYPE rega+1) MOD 4)
     MOV W167[wOp+wTx+wFx],AL
   ENDIF
ELSE                                 ; (wtl)rega --> (cpu)regb
     MOV DWORD PTR W167[wOp+wTx],rega
ENDIF
endm


WFST  macro   ereg,regb,opcd ; ***  Store register  ***
wOp = __wftemp+(03H SHL 10)
wTx = ((TYPE regb) AND 1FH) SHL 2
ifb <opcd>
     MOV  ereg,DWORD PTR W167[wOp+wTx] ; ereg := regb
else
     opcd ereg,DWORD PTR W167[wOp+wTx] ; ereg := ereg <opcd> regb
endif
endm


WFPUSH  macro   regb ; ***  Push register  ***
wOp = __wftemp+(03H SHL 10)
wTx = ((TYPE regb) AND 1FH) SHL 2
PUSH  DWORD PTR W167[wOp+wTx] ; (stack) := regb
IF ((TYPE regb) AND 8000H) NE 0
wTx = ((TYPE regb+1) AND 1FH) SHL 2
PUSH  DWORD PTR W167[wOp+wTx] ; (stack) := regb+1
endif
endm


WFPOP   macro   regb ; ***  Pop register  ***
wOp = __wftemp+(01H SHL 10)
IF ((TYPE regb) AND 8000H) NE 0
wTx = ((TYPE regb+1) AND 1FH) SHL 2
POP   DWORD PTR W167[wOp+wTx] ; regb+1 := (stack)
endif
wTx = ((TYPE regb) AND 1FH) SHL 2
POP   DWORD PTR W167[wOp+wTx] ; regb := (stack)
endm



WFLDSD  macro   regb,addr,count ; ***  Load registers  ***
;                                      regb   := (addr)
;                                      regb+1 := (addr+4)
;                                             ...
wOp = __wftemp+(01H SHL 10)
wTx = ((TYPE regb) AND 1FH) SHL 2
ifdif   <ECX>,<count>
    MOV     ECX,count
endif
    MOV     EDI,offset W167[wOp+wTx]
ifdif   <ESI>,<addr>
    MOV     ESI,offset addr
endif
    REP     MOVSD
endm


WFSTSD  macro   regb,addr,count ; ***  Store registers  ***
;                                      (addr)   := regb
;                                      (addr+4) := regb
;                                               ...
wOp = __wftemp+(03H SHL 10)
wTx = ((TYPE regb) AND 1FH) SHL 2
ifdif   <ECX>,<count>
    MOV     ECX,count
endif
    MOV     ESI,offset W167[wOp+wTx]
ifdif   <EDI>,<addr>
    MOV     EDI,offset addr
endif
    REP     MOVSD
endm


ENDIF
